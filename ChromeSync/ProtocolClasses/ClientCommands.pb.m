// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ClientCommands.pb.h"

@implementation ClientCommandsRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ClientCommandsRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface ClientCommand ()
@property int32_t setSyncPollInterval;
@property int32_t setSyncLongPollInterval;
@property int32_t maxCommitBatchSize;
@property int32_t sessionsCommitDelaySeconds;
@property int32_t throttleDelaySeconds;
@end

@implementation ClientCommand

- (BOOL) hasSetSyncPollInterval {
  return !!hasSetSyncPollInterval_;
}
- (void) setHasSetSyncPollInterval:(BOOL) value {
  hasSetSyncPollInterval_ = !!value;
}
@synthesize setSyncPollInterval;
- (BOOL) hasSetSyncLongPollInterval {
  return !!hasSetSyncLongPollInterval_;
}
- (void) setHasSetSyncLongPollInterval:(BOOL) value {
  hasSetSyncLongPollInterval_ = !!value;
}
@synthesize setSyncLongPollInterval;
- (BOOL) hasMaxCommitBatchSize {
  return !!hasMaxCommitBatchSize_;
}
- (void) setHasMaxCommitBatchSize:(BOOL) value {
  hasMaxCommitBatchSize_ = !!value;
}
@synthesize maxCommitBatchSize;
- (BOOL) hasSessionsCommitDelaySeconds {
  return !!hasSessionsCommitDelaySeconds_;
}
- (void) setHasSessionsCommitDelaySeconds:(BOOL) value {
  hasSessionsCommitDelaySeconds_ = !!value;
}
@synthesize sessionsCommitDelaySeconds;
- (BOOL) hasThrottleDelaySeconds {
  return !!hasThrottleDelaySeconds_;
}
- (void) setHasThrottleDelaySeconds:(BOOL) value {
  hasThrottleDelaySeconds_ = !!value;
}
@synthesize throttleDelaySeconds;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.setSyncPollInterval = 0;
    self.setSyncLongPollInterval = 0;
    self.maxCommitBatchSize = 0;
    self.sessionsCommitDelaySeconds = 0;
    self.throttleDelaySeconds = 0;
  }
  return self;
}
static ClientCommand* defaultClientCommandInstance = nil;
+ (void) initialize {
  if (self == [ClientCommand class]) {
    defaultClientCommandInstance = [[ClientCommand alloc] init];
  }
}
+ (ClientCommand*) defaultInstance {
  return defaultClientCommandInstance;
}
- (ClientCommand*) defaultInstance {
  return defaultClientCommandInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSetSyncPollInterval) {
    [output writeInt32:1 value:self.setSyncPollInterval];
  }
  if (self.hasSetSyncLongPollInterval) {
    [output writeInt32:2 value:self.setSyncLongPollInterval];
  }
  if (self.hasMaxCommitBatchSize) {
    [output writeInt32:3 value:self.maxCommitBatchSize];
  }
  if (self.hasSessionsCommitDelaySeconds) {
    [output writeInt32:4 value:self.sessionsCommitDelaySeconds];
  }
  if (self.hasThrottleDelaySeconds) {
    [output writeInt32:5 value:self.throttleDelaySeconds];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSetSyncPollInterval) {
    size += computeInt32Size(1, self.setSyncPollInterval);
  }
  if (self.hasSetSyncLongPollInterval) {
    size += computeInt32Size(2, self.setSyncLongPollInterval);
  }
  if (self.hasMaxCommitBatchSize) {
    size += computeInt32Size(3, self.maxCommitBatchSize);
  }
  if (self.hasSessionsCommitDelaySeconds) {
    size += computeInt32Size(4, self.sessionsCommitDelaySeconds);
  }
  if (self.hasThrottleDelaySeconds) {
    size += computeInt32Size(5, self.throttleDelaySeconds);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (ClientCommand*) parseFromData:(NSData*) data {
  return (ClientCommand*)[[[ClientCommand builder] mergeFromData:data] build];
}
+ (ClientCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientCommand*)[[[ClientCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ClientCommand*) parseFromInputStream:(NSInputStream*) input {
  return (ClientCommand*)[[[ClientCommand builder] mergeFromInputStream:input] build];
}
+ (ClientCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientCommand*)[[[ClientCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClientCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ClientCommand*)[[[ClientCommand builder] mergeFromCodedInputStream:input] build];
}
+ (ClientCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientCommand*)[[[ClientCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClientCommand_Builder*) builder {
  return [[[ClientCommand_Builder alloc] init] autorelease];
}
+ (ClientCommand_Builder*) builderWithPrototype:(ClientCommand*) prototype {
  return [[ClientCommand builder] mergeFrom:prototype];
}
- (ClientCommand_Builder*) builder {
  return [ClientCommand builder];
}
@end

@interface ClientCommand_Builder()
@property (retain) ClientCommand* result;
@end

@implementation ClientCommand_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[ClientCommand alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ClientCommand_Builder*) clear {
  self.result = [[[ClientCommand alloc] init] autorelease];
  return self;
}
- (ClientCommand_Builder*) clone {
  return [ClientCommand builderWithPrototype:result];
}
- (ClientCommand*) defaultInstance {
  return [ClientCommand defaultInstance];
}
- (ClientCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ClientCommand*) buildPartial {
  ClientCommand* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (ClientCommand_Builder*) mergeFrom:(ClientCommand*) other {
  if (other == [ClientCommand defaultInstance]) {
    return self;
  }
  if (other.hasSetSyncPollInterval) {
    [self setSetSyncPollInterval:other.setSyncPollInterval];
  }
  if (other.hasSetSyncLongPollInterval) {
    [self setSetSyncLongPollInterval:other.setSyncLongPollInterval];
  }
  if (other.hasMaxCommitBatchSize) {
    [self setMaxCommitBatchSize:other.maxCommitBatchSize];
  }
  if (other.hasSessionsCommitDelaySeconds) {
    [self setSessionsCommitDelaySeconds:other.sessionsCommitDelaySeconds];
  }
  if (other.hasThrottleDelaySeconds) {
    [self setThrottleDelaySeconds:other.throttleDelaySeconds];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ClientCommand_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ClientCommand_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSetSyncPollInterval:[input readInt32]];
        break;
      }
      case 16: {
        [self setSetSyncLongPollInterval:[input readInt32]];
        break;
      }
      case 24: {
        [self setMaxCommitBatchSize:[input readInt32]];
        break;
      }
      case 32: {
        [self setSessionsCommitDelaySeconds:[input readInt32]];
        break;
      }
      case 40: {
        [self setThrottleDelaySeconds:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSetSyncPollInterval {
  return result.hasSetSyncPollInterval;
}
- (int32_t) setSyncPollInterval {
  return result.setSyncPollInterval;
}
- (ClientCommand_Builder*) setSetSyncPollInterval:(int32_t) value {
  result.hasSetSyncPollInterval = YES;
  result.setSyncPollInterval = value;
  return self;
}
- (ClientCommand_Builder*) clearSetSyncPollInterval {
  result.hasSetSyncPollInterval = NO;
  result.setSyncPollInterval = 0;
  return self;
}
- (BOOL) hasSetSyncLongPollInterval {
  return result.hasSetSyncLongPollInterval;
}
- (int32_t) setSyncLongPollInterval {
  return result.setSyncLongPollInterval;
}
- (ClientCommand_Builder*) setSetSyncLongPollInterval:(int32_t) value {
  result.hasSetSyncLongPollInterval = YES;
  result.setSyncLongPollInterval = value;
  return self;
}
- (ClientCommand_Builder*) clearSetSyncLongPollInterval {
  result.hasSetSyncLongPollInterval = NO;
  result.setSyncLongPollInterval = 0;
  return self;
}
- (BOOL) hasMaxCommitBatchSize {
  return result.hasMaxCommitBatchSize;
}
- (int32_t) maxCommitBatchSize {
  return result.maxCommitBatchSize;
}
- (ClientCommand_Builder*) setMaxCommitBatchSize:(int32_t) value {
  result.hasMaxCommitBatchSize = YES;
  result.maxCommitBatchSize = value;
  return self;
}
- (ClientCommand_Builder*) clearMaxCommitBatchSize {
  result.hasMaxCommitBatchSize = NO;
  result.maxCommitBatchSize = 0;
  return self;
}
- (BOOL) hasSessionsCommitDelaySeconds {
  return result.hasSessionsCommitDelaySeconds;
}
- (int32_t) sessionsCommitDelaySeconds {
  return result.sessionsCommitDelaySeconds;
}
- (ClientCommand_Builder*) setSessionsCommitDelaySeconds:(int32_t) value {
  result.hasSessionsCommitDelaySeconds = YES;
  result.sessionsCommitDelaySeconds = value;
  return self;
}
- (ClientCommand_Builder*) clearSessionsCommitDelaySeconds {
  result.hasSessionsCommitDelaySeconds = NO;
  result.sessionsCommitDelaySeconds = 0;
  return self;
}
- (BOOL) hasThrottleDelaySeconds {
  return result.hasThrottleDelaySeconds;
}
- (int32_t) throttleDelaySeconds {
  return result.throttleDelaySeconds;
}
- (ClientCommand_Builder*) setThrottleDelaySeconds:(int32_t) value {
  result.hasThrottleDelaySeconds = YES;
  result.throttleDelaySeconds = value;
  return self;
}
- (ClientCommand_Builder*) clearThrottleDelaySeconds {
  result.hasThrottleDelaySeconds = NO;
  result.throttleDelaySeconds = 0;
  return self;
}
@end

