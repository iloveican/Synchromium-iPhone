// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ClientDebugInfo.pb.h"

@implementation ClientDebugInfoRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ClientDebugInfoRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GetUpdatesCallerInfoRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface SyncCycleCompletedEventInfo ()
@property int32_t numBlockingConflicts;
@property int32_t numNonBlockingConflicts;
@property int32_t numEncryptionConflicts;
@property int32_t numHierarchyConflicts;
@property int32_t numSimpleConflicts;
@property int32_t numServerConflicts;
@property int32_t numUpdatesDownloaded;
@property int32_t numReflectedUpdatesDownloaded;
@property (retain) GetUpdatesCallerInfo* callerInfo;
@end

@implementation SyncCycleCompletedEventInfo

- (BOOL) hasNumBlockingConflicts {
  return !!hasNumBlockingConflicts_;
}
- (void) setHasNumBlockingConflicts:(BOOL) value {
  hasNumBlockingConflicts_ = !!value;
}
@synthesize numBlockingConflicts;
- (BOOL) hasNumNonBlockingConflicts {
  return !!hasNumNonBlockingConflicts_;
}
- (void) setHasNumNonBlockingConflicts:(BOOL) value {
  hasNumNonBlockingConflicts_ = !!value;
}
@synthesize numNonBlockingConflicts;
- (BOOL) hasNumEncryptionConflicts {
  return !!hasNumEncryptionConflicts_;
}
- (void) setHasNumEncryptionConflicts:(BOOL) value {
  hasNumEncryptionConflicts_ = !!value;
}
@synthesize numEncryptionConflicts;
- (BOOL) hasNumHierarchyConflicts {
  return !!hasNumHierarchyConflicts_;
}
- (void) setHasNumHierarchyConflicts:(BOOL) value {
  hasNumHierarchyConflicts_ = !!value;
}
@synthesize numHierarchyConflicts;
- (BOOL) hasNumSimpleConflicts {
  return !!hasNumSimpleConflicts_;
}
- (void) setHasNumSimpleConflicts:(BOOL) value {
  hasNumSimpleConflicts_ = !!value;
}
@synthesize numSimpleConflicts;
- (BOOL) hasNumServerConflicts {
  return !!hasNumServerConflicts_;
}
- (void) setHasNumServerConflicts:(BOOL) value {
  hasNumServerConflicts_ = !!value;
}
@synthesize numServerConflicts;
- (BOOL) hasNumUpdatesDownloaded {
  return !!hasNumUpdatesDownloaded_;
}
- (void) setHasNumUpdatesDownloaded:(BOOL) value {
  hasNumUpdatesDownloaded_ = !!value;
}
@synthesize numUpdatesDownloaded;
- (BOOL) hasNumReflectedUpdatesDownloaded {
  return !!hasNumReflectedUpdatesDownloaded_;
}
- (void) setHasNumReflectedUpdatesDownloaded:(BOOL) value {
  hasNumReflectedUpdatesDownloaded_ = !!value;
}
@synthesize numReflectedUpdatesDownloaded;
- (BOOL) hasCallerInfo {
  return !!hasCallerInfo_;
}
- (void) setHasCallerInfo:(BOOL) value {
  hasCallerInfo_ = !!value;
}
@synthesize callerInfo;
- (void) dealloc {
  self.callerInfo = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.numBlockingConflicts = 0;
    self.numNonBlockingConflicts = 0;
    self.numEncryptionConflicts = 0;
    self.numHierarchyConflicts = 0;
    self.numSimpleConflicts = 0;
    self.numServerConflicts = 0;
    self.numUpdatesDownloaded = 0;
    self.numReflectedUpdatesDownloaded = 0;
    self.callerInfo = [GetUpdatesCallerInfo defaultInstance];
  }
  return self;
}
static SyncCycleCompletedEventInfo* defaultSyncCycleCompletedEventInfoInstance = nil;
+ (void) initialize {
  if (self == [SyncCycleCompletedEventInfo class]) {
    defaultSyncCycleCompletedEventInfoInstance = [[SyncCycleCompletedEventInfo alloc] init];
  }
}
+ (SyncCycleCompletedEventInfo*) defaultInstance {
  return defaultSyncCycleCompletedEventInfoInstance;
}
- (SyncCycleCompletedEventInfo*) defaultInstance {
  return defaultSyncCycleCompletedEventInfoInstance;
}
- (BOOL) isInitialized {
  if (self.hasCallerInfo) {
    if (!self.callerInfo.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNumBlockingConflicts) {
    [output writeInt32:2 value:self.numBlockingConflicts];
  }
  if (self.hasNumNonBlockingConflicts) {
    [output writeInt32:3 value:self.numNonBlockingConflicts];
  }
  if (self.hasNumEncryptionConflicts) {
    [output writeInt32:4 value:self.numEncryptionConflicts];
  }
  if (self.hasNumHierarchyConflicts) {
    [output writeInt32:5 value:self.numHierarchyConflicts];
  }
  if (self.hasNumSimpleConflicts) {
    [output writeInt32:6 value:self.numSimpleConflicts];
  }
  if (self.hasNumServerConflicts) {
    [output writeInt32:7 value:self.numServerConflicts];
  }
  if (self.hasNumUpdatesDownloaded) {
    [output writeInt32:8 value:self.numUpdatesDownloaded];
  }
  if (self.hasNumReflectedUpdatesDownloaded) {
    [output writeInt32:9 value:self.numReflectedUpdatesDownloaded];
  }
  if (self.hasCallerInfo) {
    [output writeMessage:10 value:self.callerInfo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasNumBlockingConflicts) {
    size += computeInt32Size(2, self.numBlockingConflicts);
  }
  if (self.hasNumNonBlockingConflicts) {
    size += computeInt32Size(3, self.numNonBlockingConflicts);
  }
  if (self.hasNumEncryptionConflicts) {
    size += computeInt32Size(4, self.numEncryptionConflicts);
  }
  if (self.hasNumHierarchyConflicts) {
    size += computeInt32Size(5, self.numHierarchyConflicts);
  }
  if (self.hasNumSimpleConflicts) {
    size += computeInt32Size(6, self.numSimpleConflicts);
  }
  if (self.hasNumServerConflicts) {
    size += computeInt32Size(7, self.numServerConflicts);
  }
  if (self.hasNumUpdatesDownloaded) {
    size += computeInt32Size(8, self.numUpdatesDownloaded);
  }
  if (self.hasNumReflectedUpdatesDownloaded) {
    size += computeInt32Size(9, self.numReflectedUpdatesDownloaded);
  }
  if (self.hasCallerInfo) {
    size += computeMessageSize(10, self.callerInfo);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (SyncCycleCompletedEventInfo*) parseFromData:(NSData*) data {
  return (SyncCycleCompletedEventInfo*)[[[SyncCycleCompletedEventInfo builder] mergeFromData:data] build];
}
+ (SyncCycleCompletedEventInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SyncCycleCompletedEventInfo*)[[[SyncCycleCompletedEventInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SyncCycleCompletedEventInfo*) parseFromInputStream:(NSInputStream*) input {
  return (SyncCycleCompletedEventInfo*)[[[SyncCycleCompletedEventInfo builder] mergeFromInputStream:input] build];
}
+ (SyncCycleCompletedEventInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SyncCycleCompletedEventInfo*)[[[SyncCycleCompletedEventInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SyncCycleCompletedEventInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SyncCycleCompletedEventInfo*)[[[SyncCycleCompletedEventInfo builder] mergeFromCodedInputStream:input] build];
}
+ (SyncCycleCompletedEventInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SyncCycleCompletedEventInfo*)[[[SyncCycleCompletedEventInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SyncCycleCompletedEventInfo_Builder*) builder {
  return [[[SyncCycleCompletedEventInfo_Builder alloc] init] autorelease];
}
+ (SyncCycleCompletedEventInfo_Builder*) builderWithPrototype:(SyncCycleCompletedEventInfo*) prototype {
  return [[SyncCycleCompletedEventInfo builder] mergeFrom:prototype];
}
- (SyncCycleCompletedEventInfo_Builder*) builder {
  return [SyncCycleCompletedEventInfo builder];
}
@end

@interface SyncCycleCompletedEventInfo_Builder()
@property (retain) SyncCycleCompletedEventInfo* result;
@end

@implementation SyncCycleCompletedEventInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[SyncCycleCompletedEventInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (SyncCycleCompletedEventInfo_Builder*) clear {
  self.result = [[[SyncCycleCompletedEventInfo alloc] init] autorelease];
  return self;
}
- (SyncCycleCompletedEventInfo_Builder*) clone {
  return [SyncCycleCompletedEventInfo builderWithPrototype:result];
}
- (SyncCycleCompletedEventInfo*) defaultInstance {
  return [SyncCycleCompletedEventInfo defaultInstance];
}
- (SyncCycleCompletedEventInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SyncCycleCompletedEventInfo*) buildPartial {
  SyncCycleCompletedEventInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (SyncCycleCompletedEventInfo_Builder*) mergeFrom:(SyncCycleCompletedEventInfo*) other {
  if (other == [SyncCycleCompletedEventInfo defaultInstance]) {
    return self;
  }
  if (other.hasNumBlockingConflicts) {
    [self setNumBlockingConflicts:other.numBlockingConflicts];
  }
  if (other.hasNumNonBlockingConflicts) {
    [self setNumNonBlockingConflicts:other.numNonBlockingConflicts];
  }
  if (other.hasNumEncryptionConflicts) {
    [self setNumEncryptionConflicts:other.numEncryptionConflicts];
  }
  if (other.hasNumHierarchyConflicts) {
    [self setNumHierarchyConflicts:other.numHierarchyConflicts];
  }
  if (other.hasNumSimpleConflicts) {
    [self setNumSimpleConflicts:other.numSimpleConflicts];
  }
  if (other.hasNumServerConflicts) {
    [self setNumServerConflicts:other.numServerConflicts];
  }
  if (other.hasNumUpdatesDownloaded) {
    [self setNumUpdatesDownloaded:other.numUpdatesDownloaded];
  }
  if (other.hasNumReflectedUpdatesDownloaded) {
    [self setNumReflectedUpdatesDownloaded:other.numReflectedUpdatesDownloaded];
  }
  if (other.hasCallerInfo) {
    [self mergeCallerInfo:other.callerInfo];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SyncCycleCompletedEventInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SyncCycleCompletedEventInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 16: {
        [self setNumBlockingConflicts:[input readInt32]];
        break;
      }
      case 24: {
        [self setNumNonBlockingConflicts:[input readInt32]];
        break;
      }
      case 32: {
        [self setNumEncryptionConflicts:[input readInt32]];
        break;
      }
      case 40: {
        [self setNumHierarchyConflicts:[input readInt32]];
        break;
      }
      case 48: {
        [self setNumSimpleConflicts:[input readInt32]];
        break;
      }
      case 56: {
        [self setNumServerConflicts:[input readInt32]];
        break;
      }
      case 64: {
        [self setNumUpdatesDownloaded:[input readInt32]];
        break;
      }
      case 72: {
        [self setNumReflectedUpdatesDownloaded:[input readInt32]];
        break;
      }
      case 82: {
        GetUpdatesCallerInfo_Builder* subBuilder = [GetUpdatesCallerInfo builder];
        if (self.hasCallerInfo) {
          [subBuilder mergeFrom:self.callerInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCallerInfo:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasNumBlockingConflicts {
  return result.hasNumBlockingConflicts;
}
- (int32_t) numBlockingConflicts {
  return result.numBlockingConflicts;
}
- (SyncCycleCompletedEventInfo_Builder*) setNumBlockingConflicts:(int32_t) value {
  result.hasNumBlockingConflicts = YES;
  result.numBlockingConflicts = value;
  return self;
}
- (SyncCycleCompletedEventInfo_Builder*) clearNumBlockingConflicts {
  result.hasNumBlockingConflicts = NO;
  result.numBlockingConflicts = 0;
  return self;
}
- (BOOL) hasNumNonBlockingConflicts {
  return result.hasNumNonBlockingConflicts;
}
- (int32_t) numNonBlockingConflicts {
  return result.numNonBlockingConflicts;
}
- (SyncCycleCompletedEventInfo_Builder*) setNumNonBlockingConflicts:(int32_t) value {
  result.hasNumNonBlockingConflicts = YES;
  result.numNonBlockingConflicts = value;
  return self;
}
- (SyncCycleCompletedEventInfo_Builder*) clearNumNonBlockingConflicts {
  result.hasNumNonBlockingConflicts = NO;
  result.numNonBlockingConflicts = 0;
  return self;
}
- (BOOL) hasNumEncryptionConflicts {
  return result.hasNumEncryptionConflicts;
}
- (int32_t) numEncryptionConflicts {
  return result.numEncryptionConflicts;
}
- (SyncCycleCompletedEventInfo_Builder*) setNumEncryptionConflicts:(int32_t) value {
  result.hasNumEncryptionConflicts = YES;
  result.numEncryptionConflicts = value;
  return self;
}
- (SyncCycleCompletedEventInfo_Builder*) clearNumEncryptionConflicts {
  result.hasNumEncryptionConflicts = NO;
  result.numEncryptionConflicts = 0;
  return self;
}
- (BOOL) hasNumHierarchyConflicts {
  return result.hasNumHierarchyConflicts;
}
- (int32_t) numHierarchyConflicts {
  return result.numHierarchyConflicts;
}
- (SyncCycleCompletedEventInfo_Builder*) setNumHierarchyConflicts:(int32_t) value {
  result.hasNumHierarchyConflicts = YES;
  result.numHierarchyConflicts = value;
  return self;
}
- (SyncCycleCompletedEventInfo_Builder*) clearNumHierarchyConflicts {
  result.hasNumHierarchyConflicts = NO;
  result.numHierarchyConflicts = 0;
  return self;
}
- (BOOL) hasNumSimpleConflicts {
  return result.hasNumSimpleConflicts;
}
- (int32_t) numSimpleConflicts {
  return result.numSimpleConflicts;
}
- (SyncCycleCompletedEventInfo_Builder*) setNumSimpleConflicts:(int32_t) value {
  result.hasNumSimpleConflicts = YES;
  result.numSimpleConflicts = value;
  return self;
}
- (SyncCycleCompletedEventInfo_Builder*) clearNumSimpleConflicts {
  result.hasNumSimpleConflicts = NO;
  result.numSimpleConflicts = 0;
  return self;
}
- (BOOL) hasNumServerConflicts {
  return result.hasNumServerConflicts;
}
- (int32_t) numServerConflicts {
  return result.numServerConflicts;
}
- (SyncCycleCompletedEventInfo_Builder*) setNumServerConflicts:(int32_t) value {
  result.hasNumServerConflicts = YES;
  result.numServerConflicts = value;
  return self;
}
- (SyncCycleCompletedEventInfo_Builder*) clearNumServerConflicts {
  result.hasNumServerConflicts = NO;
  result.numServerConflicts = 0;
  return self;
}
- (BOOL) hasNumUpdatesDownloaded {
  return result.hasNumUpdatesDownloaded;
}
- (int32_t) numUpdatesDownloaded {
  return result.numUpdatesDownloaded;
}
- (SyncCycleCompletedEventInfo_Builder*) setNumUpdatesDownloaded:(int32_t) value {
  result.hasNumUpdatesDownloaded = YES;
  result.numUpdatesDownloaded = value;
  return self;
}
- (SyncCycleCompletedEventInfo_Builder*) clearNumUpdatesDownloaded {
  result.hasNumUpdatesDownloaded = NO;
  result.numUpdatesDownloaded = 0;
  return self;
}
- (BOOL) hasNumReflectedUpdatesDownloaded {
  return result.hasNumReflectedUpdatesDownloaded;
}
- (int32_t) numReflectedUpdatesDownloaded {
  return result.numReflectedUpdatesDownloaded;
}
- (SyncCycleCompletedEventInfo_Builder*) setNumReflectedUpdatesDownloaded:(int32_t) value {
  result.hasNumReflectedUpdatesDownloaded = YES;
  result.numReflectedUpdatesDownloaded = value;
  return self;
}
- (SyncCycleCompletedEventInfo_Builder*) clearNumReflectedUpdatesDownloaded {
  result.hasNumReflectedUpdatesDownloaded = NO;
  result.numReflectedUpdatesDownloaded = 0;
  return self;
}
- (BOOL) hasCallerInfo {
  return result.hasCallerInfo;
}
- (GetUpdatesCallerInfo*) callerInfo {
  return result.callerInfo;
}
- (SyncCycleCompletedEventInfo_Builder*) setCallerInfo:(GetUpdatesCallerInfo*) value {
  result.hasCallerInfo = YES;
  result.callerInfo = value;
  return self;
}
- (SyncCycleCompletedEventInfo_Builder*) setCallerInfoBuilder:(GetUpdatesCallerInfo_Builder*) builderForValue {
  return [self setCallerInfo:[builderForValue build]];
}
- (SyncCycleCompletedEventInfo_Builder*) mergeCallerInfo:(GetUpdatesCallerInfo*) value {
  if (result.hasCallerInfo &&
      result.callerInfo != [GetUpdatesCallerInfo defaultInstance]) {
    result.callerInfo =
      [[[GetUpdatesCallerInfo builderWithPrototype:result.callerInfo] mergeFrom:value] buildPartial];
  } else {
    result.callerInfo = value;
  }
  result.hasCallerInfo = YES;
  return self;
}
- (SyncCycleCompletedEventInfo_Builder*) clearCallerInfo {
  result.hasCallerInfo = NO;
  result.callerInfo = [GetUpdatesCallerInfo defaultInstance];
  return self;
}
@end

@interface DebugEventInfo ()
@property DebugEventInfo_EventType type;
@property (retain) SyncCycleCompletedEventInfo* syncCycleCompletedEventInfo;
@end

@implementation DebugEventInfo

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasSyncCycleCompletedEventInfo {
  return !!hasSyncCycleCompletedEventInfo_;
}
- (void) setHasSyncCycleCompletedEventInfo:(BOOL) value {
  hasSyncCycleCompletedEventInfo_ = !!value;
}
@synthesize syncCycleCompletedEventInfo;
- (void) dealloc {
  self.syncCycleCompletedEventInfo = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.type = DebugEventInfo_EventTypeConnectionStatusChange;
    self.syncCycleCompletedEventInfo = [SyncCycleCompletedEventInfo defaultInstance];
  }
  return self;
}
static DebugEventInfo* defaultDebugEventInfoInstance = nil;
+ (void) initialize {
  if (self == [DebugEventInfo class]) {
    defaultDebugEventInfoInstance = [[DebugEventInfo alloc] init];
  }
}
+ (DebugEventInfo*) defaultInstance {
  return defaultDebugEventInfoInstance;
}
- (DebugEventInfo*) defaultInstance {
  return defaultDebugEventInfoInstance;
}
- (BOOL) isInitialized {
  if (self.hasSyncCycleCompletedEventInfo) {
    if (!self.syncCycleCompletedEventInfo.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  if (self.hasSyncCycleCompletedEventInfo) {
    [output writeMessage:2 value:self.syncCycleCompletedEventInfo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasType) {
    size += computeEnumSize(1, self.type);
  }
  if (self.hasSyncCycleCompletedEventInfo) {
    size += computeMessageSize(2, self.syncCycleCompletedEventInfo);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (DebugEventInfo*) parseFromData:(NSData*) data {
  return (DebugEventInfo*)[[[DebugEventInfo builder] mergeFromData:data] build];
}
+ (DebugEventInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DebugEventInfo*)[[[DebugEventInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DebugEventInfo*) parseFromInputStream:(NSInputStream*) input {
  return (DebugEventInfo*)[[[DebugEventInfo builder] mergeFromInputStream:input] build];
}
+ (DebugEventInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DebugEventInfo*)[[[DebugEventInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DebugEventInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DebugEventInfo*)[[[DebugEventInfo builder] mergeFromCodedInputStream:input] build];
}
+ (DebugEventInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DebugEventInfo*)[[[DebugEventInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DebugEventInfo_Builder*) builder {
  return [[[DebugEventInfo_Builder alloc] init] autorelease];
}
+ (DebugEventInfo_Builder*) builderWithPrototype:(DebugEventInfo*) prototype {
  return [[DebugEventInfo builder] mergeFrom:prototype];
}
- (DebugEventInfo_Builder*) builder {
  return [DebugEventInfo builder];
}
@end

BOOL DebugEventInfo_EventTypeIsValidValue(DebugEventInfo_EventType value) {
  switch (value) {
    case DebugEventInfo_EventTypeConnectionStatusChange:
    case DebugEventInfo_EventTypeUpdatedToken:
    case DebugEventInfo_EventTypePassphraseRequired:
    case DebugEventInfo_EventTypePassphraseAccepted:
    case DebugEventInfo_EventTypeInitializationComplete:
    case DebugEventInfo_EventTypeStopSyncingPermanently:
    case DebugEventInfo_EventTypeEncryptedTypesChanged:
    case DebugEventInfo_EventTypeEncryptionComplete:
    case DebugEventInfo_EventTypeActionableError:
      return YES;
    default:
      return NO;
  }
}
@interface DebugEventInfo_Builder()
@property (retain) DebugEventInfo* result;
@end

@implementation DebugEventInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[DebugEventInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (DebugEventInfo_Builder*) clear {
  self.result = [[[DebugEventInfo alloc] init] autorelease];
  return self;
}
- (DebugEventInfo_Builder*) clone {
  return [DebugEventInfo builderWithPrototype:result];
}
- (DebugEventInfo*) defaultInstance {
  return [DebugEventInfo defaultInstance];
}
- (DebugEventInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DebugEventInfo*) buildPartial {
  DebugEventInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (DebugEventInfo_Builder*) mergeFrom:(DebugEventInfo*) other {
  if (other == [DebugEventInfo defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasSyncCycleCompletedEventInfo) {
    [self mergeSyncCycleCompletedEventInfo:other.syncCycleCompletedEventInfo];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DebugEventInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DebugEventInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (DebugEventInfo_EventTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        SyncCycleCompletedEventInfo_Builder* subBuilder = [SyncCycleCompletedEventInfo builder];
        if (self.hasSyncCycleCompletedEventInfo) {
          [subBuilder mergeFrom:self.syncCycleCompletedEventInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSyncCycleCompletedEventInfo:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (DebugEventInfo_EventType) type {
  return result.type;
}
- (DebugEventInfo_Builder*) setType:(DebugEventInfo_EventType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (DebugEventInfo_Builder*) clearType {
  result.hasType = NO;
  result.type = DebugEventInfo_EventTypeConnectionStatusChange;
  return self;
}
- (BOOL) hasSyncCycleCompletedEventInfo {
  return result.hasSyncCycleCompletedEventInfo;
}
- (SyncCycleCompletedEventInfo*) syncCycleCompletedEventInfo {
  return result.syncCycleCompletedEventInfo;
}
- (DebugEventInfo_Builder*) setSyncCycleCompletedEventInfo:(SyncCycleCompletedEventInfo*) value {
  result.hasSyncCycleCompletedEventInfo = YES;
  result.syncCycleCompletedEventInfo = value;
  return self;
}
- (DebugEventInfo_Builder*) setSyncCycleCompletedEventInfoBuilder:(SyncCycleCompletedEventInfo_Builder*) builderForValue {
  return [self setSyncCycleCompletedEventInfo:[builderForValue build]];
}
- (DebugEventInfo_Builder*) mergeSyncCycleCompletedEventInfo:(SyncCycleCompletedEventInfo*) value {
  if (result.hasSyncCycleCompletedEventInfo &&
      result.syncCycleCompletedEventInfo != [SyncCycleCompletedEventInfo defaultInstance]) {
    result.syncCycleCompletedEventInfo =
      [[[SyncCycleCompletedEventInfo builderWithPrototype:result.syncCycleCompletedEventInfo] mergeFrom:value] buildPartial];
  } else {
    result.syncCycleCompletedEventInfo = value;
  }
  result.hasSyncCycleCompletedEventInfo = YES;
  return self;
}
- (DebugEventInfo_Builder*) clearSyncCycleCompletedEventInfo {
  result.hasSyncCycleCompletedEventInfo = NO;
  result.syncCycleCompletedEventInfo = [SyncCycleCompletedEventInfo defaultInstance];
  return self;
}
@end

@interface DebugInfo ()
@property (retain) NSMutableArray* mutableEventsList;
@property BOOL cryptographerReady;
@property BOOL cryptographerHasPendingKeys;
@property BOOL eventsDropped;
@end

@implementation DebugInfo

@synthesize mutableEventsList;
- (BOOL) hasCryptographerReady {
  return !!hasCryptographerReady_;
}
- (void) setHasCryptographerReady:(BOOL) value {
  hasCryptographerReady_ = !!value;
}
- (BOOL) cryptographerReady {
  return !!cryptographerReady_;
}
- (void) setCryptographerReady:(BOOL) value {
  cryptographerReady_ = !!value;
}
- (BOOL) hasCryptographerHasPendingKeys {
  return !!hasCryptographerHasPendingKeys_;
}
- (void) setHasCryptographerHasPendingKeys:(BOOL) value {
  hasCryptographerHasPendingKeys_ = !!value;
}
- (BOOL) cryptographerHasPendingKeys {
  return !!cryptographerHasPendingKeys_;
}
- (void) setCryptographerHasPendingKeys:(BOOL) value {
  cryptographerHasPendingKeys_ = !!value;
}
- (BOOL) hasEventsDropped {
  return !!hasEventsDropped_;
}
- (void) setHasEventsDropped:(BOOL) value {
  hasEventsDropped_ = !!value;
}
- (BOOL) eventsDropped {
  return !!eventsDropped_;
}
- (void) setEventsDropped:(BOOL) value {
  eventsDropped_ = !!value;
}
- (void) dealloc {
  self.mutableEventsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.cryptographerReady = NO;
    self.cryptographerHasPendingKeys = NO;
    self.eventsDropped = NO;
  }
  return self;
}
static DebugInfo* defaultDebugInfoInstance = nil;
+ (void) initialize {
  if (self == [DebugInfo class]) {
    defaultDebugInfoInstance = [[DebugInfo alloc] init];
  }
}
+ (DebugInfo*) defaultInstance {
  return defaultDebugInfoInstance;
}
- (DebugInfo*) defaultInstance {
  return defaultDebugInfoInstance;
}
- (NSArray*) eventsList {
  return mutableEventsList;
}
- (DebugEventInfo*) eventsAtIndex:(int32_t) index {
  id value = [mutableEventsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (DebugEventInfo* element in self.eventsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (DebugEventInfo* element in self.eventsList) {
    [output writeMessage:1 value:element];
  }
  if (self.hasCryptographerReady) {
    [output writeBool:2 value:self.cryptographerReady];
  }
  if (self.hasCryptographerHasPendingKeys) {
    [output writeBool:3 value:self.cryptographerHasPendingKeys];
  }
  if (self.hasEventsDropped) {
    [output writeBool:4 value:self.eventsDropped];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (DebugEventInfo* element in self.eventsList) {
    size += computeMessageSize(1, element);
  }
  if (self.hasCryptographerReady) {
    size += computeBoolSize(2, self.cryptographerReady);
  }
  if (self.hasCryptographerHasPendingKeys) {
    size += computeBoolSize(3, self.cryptographerHasPendingKeys);
  }
  if (self.hasEventsDropped) {
    size += computeBoolSize(4, self.eventsDropped);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (DebugInfo*) parseFromData:(NSData*) data {
  return (DebugInfo*)[[[DebugInfo builder] mergeFromData:data] build];
}
+ (DebugInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DebugInfo*)[[[DebugInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DebugInfo*) parseFromInputStream:(NSInputStream*) input {
  return (DebugInfo*)[[[DebugInfo builder] mergeFromInputStream:input] build];
}
+ (DebugInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DebugInfo*)[[[DebugInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DebugInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DebugInfo*)[[[DebugInfo builder] mergeFromCodedInputStream:input] build];
}
+ (DebugInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DebugInfo*)[[[DebugInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DebugInfo_Builder*) builder {
  return [[[DebugInfo_Builder alloc] init] autorelease];
}
+ (DebugInfo_Builder*) builderWithPrototype:(DebugInfo*) prototype {
  return [[DebugInfo builder] mergeFrom:prototype];
}
- (DebugInfo_Builder*) builder {
  return [DebugInfo builder];
}
@end

@interface DebugInfo_Builder()
@property (retain) DebugInfo* result;
@end

@implementation DebugInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[DebugInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (DebugInfo_Builder*) clear {
  self.result = [[[DebugInfo alloc] init] autorelease];
  return self;
}
- (DebugInfo_Builder*) clone {
  return [DebugInfo builderWithPrototype:result];
}
- (DebugInfo*) defaultInstance {
  return [DebugInfo defaultInstance];
}
- (DebugInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DebugInfo*) buildPartial {
  DebugInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (DebugInfo_Builder*) mergeFrom:(DebugInfo*) other {
  if (other == [DebugInfo defaultInstance]) {
    return self;
  }
  if (other.mutableEventsList.count > 0) {
    if (result.mutableEventsList == nil) {
      result.mutableEventsList = [NSMutableArray array];
    }
    [result.mutableEventsList addObjectsFromArray:other.mutableEventsList];
  }
  if (other.hasCryptographerReady) {
    [self setCryptographerReady:other.cryptographerReady];
  }
  if (other.hasCryptographerHasPendingKeys) {
    [self setCryptographerHasPendingKeys:other.cryptographerHasPendingKeys];
  }
  if (other.hasEventsDropped) {
    [self setEventsDropped:other.eventsDropped];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DebugInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DebugInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        DebugEventInfo_Builder* subBuilder = [DebugEventInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addEvents:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setCryptographerReady:[input readBool]];
        break;
      }
      case 24: {
        [self setCryptographerHasPendingKeys:[input readBool]];
        break;
      }
      case 32: {
        [self setEventsDropped:[input readBool]];
        break;
      }
    }
  }
}
- (NSArray*) eventsList {
  if (result.mutableEventsList == nil) { return [NSArray array]; }
  return result.mutableEventsList;
}
- (DebugEventInfo*) eventsAtIndex:(int32_t) index {
  return [result eventsAtIndex:index];
}
- (DebugInfo_Builder*) replaceEventsAtIndex:(int32_t) index with:(DebugEventInfo*) value {
  [result.mutableEventsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (DebugInfo_Builder*) addAllEvents:(NSArray*) values {
  if (result.mutableEventsList == nil) {
    result.mutableEventsList = [NSMutableArray array];
  }
  [result.mutableEventsList addObjectsFromArray:values];
  return self;
}
- (DebugInfo_Builder*) clearEventsList {
  result.mutableEventsList = nil;
  return self;
}
- (DebugInfo_Builder*) addEvents:(DebugEventInfo*) value {
  if (result.mutableEventsList == nil) {
    result.mutableEventsList = [NSMutableArray array];
  }
  [result.mutableEventsList addObject:value];
  return self;
}
- (BOOL) hasCryptographerReady {
  return result.hasCryptographerReady;
}
- (BOOL) cryptographerReady {
  return result.cryptographerReady;
}
- (DebugInfo_Builder*) setCryptographerReady:(BOOL) value {
  result.hasCryptographerReady = YES;
  result.cryptographerReady = value;
  return self;
}
- (DebugInfo_Builder*) clearCryptographerReady {
  result.hasCryptographerReady = NO;
  result.cryptographerReady = NO;
  return self;
}
- (BOOL) hasCryptographerHasPendingKeys {
  return result.hasCryptographerHasPendingKeys;
}
- (BOOL) cryptographerHasPendingKeys {
  return result.cryptographerHasPendingKeys;
}
- (DebugInfo_Builder*) setCryptographerHasPendingKeys:(BOOL) value {
  result.hasCryptographerHasPendingKeys = YES;
  result.cryptographerHasPendingKeys = value;
  return self;
}
- (DebugInfo_Builder*) clearCryptographerHasPendingKeys {
  result.hasCryptographerHasPendingKeys = NO;
  result.cryptographerHasPendingKeys = NO;
  return self;
}
- (BOOL) hasEventsDropped {
  return result.hasEventsDropped;
}
- (BOOL) eventsDropped {
  return result.eventsDropped;
}
- (DebugInfo_Builder*) setEventsDropped:(BOOL) value {
  result.hasEventsDropped = YES;
  result.eventsDropped = value;
  return self;
}
- (DebugInfo_Builder*) clearEventsDropped {
  result.hasEventsDropped = NO;
  result.eventsDropped = NO;
  return self;
}
@end

