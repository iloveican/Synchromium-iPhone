// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "NigoriSpecifics.pb.h"

@implementation NigoriSpecificsRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [NigoriSpecificsRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [EncryptionRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface NigoriKey ()
@property (retain) NSString* name;
@property (retain) NSData* userKey;
@property (retain) NSData* encryptionKey;
@property (retain) NSData* macKey;
@end

@implementation NigoriKey

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasUserKey {
  return !!hasUserKey_;
}
- (void) setHasUserKey:(BOOL) value {
  hasUserKey_ = !!value;
}
@synthesize userKey;
- (BOOL) hasEncryptionKey {
  return !!hasEncryptionKey_;
}
- (void) setHasEncryptionKey:(BOOL) value {
  hasEncryptionKey_ = !!value;
}
@synthesize encryptionKey;
- (BOOL) hasMacKey {
  return !!hasMacKey_;
}
- (void) setHasMacKey:(BOOL) value {
  hasMacKey_ = !!value;
}
@synthesize macKey;
- (void) dealloc {
  self.name = nil;
  self.userKey = nil;
  self.encryptionKey = nil;
  self.macKey = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.userKey = [NSData data];
    self.encryptionKey = [NSData data];
    self.macKey = [NSData data];
  }
  return self;
}
static NigoriKey* defaultNigoriKeyInstance = nil;
+ (void) initialize {
  if (self == [NigoriKey class]) {
    defaultNigoriKeyInstance = [[NigoriKey alloc] init];
  }
}
+ (NigoriKey*) defaultInstance {
  return defaultNigoriKeyInstance;
}
- (NigoriKey*) defaultInstance {
  return defaultNigoriKeyInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasUserKey) {
    [output writeData:2 value:self.userKey];
  }
  if (self.hasEncryptionKey) {
    [output writeData:3 value:self.encryptionKey];
  }
  if (self.hasMacKey) {
    [output writeData:4 value:self.macKey];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  if (self.hasUserKey) {
    size += computeDataSize(2, self.userKey);
  }
  if (self.hasEncryptionKey) {
    size += computeDataSize(3, self.encryptionKey);
  }
  if (self.hasMacKey) {
    size += computeDataSize(4, self.macKey);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (NigoriKey*) parseFromData:(NSData*) data {
  return (NigoriKey*)[[[NigoriKey builder] mergeFromData:data] build];
}
+ (NigoriKey*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NigoriKey*)[[[NigoriKey builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (NigoriKey*) parseFromInputStream:(NSInputStream*) input {
  return (NigoriKey*)[[[NigoriKey builder] mergeFromInputStream:input] build];
}
+ (NigoriKey*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NigoriKey*)[[[NigoriKey builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NigoriKey*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (NigoriKey*)[[[NigoriKey builder] mergeFromCodedInputStream:input] build];
}
+ (NigoriKey*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NigoriKey*)[[[NigoriKey builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NigoriKey_Builder*) builder {
  return [[[NigoriKey_Builder alloc] init] autorelease];
}
+ (NigoriKey_Builder*) builderWithPrototype:(NigoriKey*) prototype {
  return [[NigoriKey builder] mergeFrom:prototype];
}
- (NigoriKey_Builder*) builder {
  return [NigoriKey builder];
}
@end

@interface NigoriKey_Builder()
@property (retain) NigoriKey* result;
@end

@implementation NigoriKey_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[NigoriKey alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (NigoriKey_Builder*) clear {
  self.result = [[[NigoriKey alloc] init] autorelease];
  return self;
}
- (NigoriKey_Builder*) clone {
  return [NigoriKey builderWithPrototype:result];
}
- (NigoriKey*) defaultInstance {
  return [NigoriKey defaultInstance];
}
- (NigoriKey*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (NigoriKey*) buildPartial {
  NigoriKey* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (NigoriKey_Builder*) mergeFrom:(NigoriKey*) other {
  if (other == [NigoriKey defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasUserKey) {
    [self setUserKey:other.userKey];
  }
  if (other.hasEncryptionKey) {
    [self setEncryptionKey:other.encryptionKey];
  }
  if (other.hasMacKey) {
    [self setMacKey:other.macKey];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (NigoriKey_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (NigoriKey_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setUserKey:[input readData]];
        break;
      }
      case 26: {
        [self setEncryptionKey:[input readData]];
        break;
      }
      case 34: {
        [self setMacKey:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (NigoriKey_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (NigoriKey_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasUserKey {
  return result.hasUserKey;
}
- (NSData*) userKey {
  return result.userKey;
}
- (NigoriKey_Builder*) setUserKey:(NSData*) value {
  result.hasUserKey = YES;
  result.userKey = value;
  return self;
}
- (NigoriKey_Builder*) clearUserKey {
  result.hasUserKey = NO;
  result.userKey = [NSData data];
  return self;
}
- (BOOL) hasEncryptionKey {
  return result.hasEncryptionKey;
}
- (NSData*) encryptionKey {
  return result.encryptionKey;
}
- (NigoriKey_Builder*) setEncryptionKey:(NSData*) value {
  result.hasEncryptionKey = YES;
  result.encryptionKey = value;
  return self;
}
- (NigoriKey_Builder*) clearEncryptionKey {
  result.hasEncryptionKey = NO;
  result.encryptionKey = [NSData data];
  return self;
}
- (BOOL) hasMacKey {
  return result.hasMacKey;
}
- (NSData*) macKey {
  return result.macKey;
}
- (NigoriKey_Builder*) setMacKey:(NSData*) value {
  result.hasMacKey = YES;
  result.macKey = value;
  return self;
}
- (NigoriKey_Builder*) clearMacKey {
  result.hasMacKey = NO;
  result.macKey = [NSData data];
  return self;
}
@end

@interface NigoriKeyBag ()
@property (retain) NSMutableArray* mutableKeyList;
@end

@implementation NigoriKeyBag

@synthesize mutableKeyList;
- (void) dealloc {
  self.mutableKeyList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static NigoriKeyBag* defaultNigoriKeyBagInstance = nil;
+ (void) initialize {
  if (self == [NigoriKeyBag class]) {
    defaultNigoriKeyBagInstance = [[NigoriKeyBag alloc] init];
  }
}
+ (NigoriKeyBag*) defaultInstance {
  return defaultNigoriKeyBagInstance;
}
- (NigoriKeyBag*) defaultInstance {
  return defaultNigoriKeyBagInstance;
}
- (NSArray*) keyList {
  return mutableKeyList;
}
- (NigoriKey*) keyAtIndex:(int32_t) index {
  id value = [mutableKeyList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (NigoriKey* element in self.keyList) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (NigoriKey* element in self.keyList) {
    size += computeMessageSize(2, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (NigoriKeyBag*) parseFromData:(NSData*) data {
  return (NigoriKeyBag*)[[[NigoriKeyBag builder] mergeFromData:data] build];
}
+ (NigoriKeyBag*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NigoriKeyBag*)[[[NigoriKeyBag builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (NigoriKeyBag*) parseFromInputStream:(NSInputStream*) input {
  return (NigoriKeyBag*)[[[NigoriKeyBag builder] mergeFromInputStream:input] build];
}
+ (NigoriKeyBag*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NigoriKeyBag*)[[[NigoriKeyBag builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NigoriKeyBag*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (NigoriKeyBag*)[[[NigoriKeyBag builder] mergeFromCodedInputStream:input] build];
}
+ (NigoriKeyBag*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NigoriKeyBag*)[[[NigoriKeyBag builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NigoriKeyBag_Builder*) builder {
  return [[[NigoriKeyBag_Builder alloc] init] autorelease];
}
+ (NigoriKeyBag_Builder*) builderWithPrototype:(NigoriKeyBag*) prototype {
  return [[NigoriKeyBag builder] mergeFrom:prototype];
}
- (NigoriKeyBag_Builder*) builder {
  return [NigoriKeyBag builder];
}
@end

@interface NigoriKeyBag_Builder()
@property (retain) NigoriKeyBag* result;
@end

@implementation NigoriKeyBag_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[NigoriKeyBag alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (NigoriKeyBag_Builder*) clear {
  self.result = [[[NigoriKeyBag alloc] init] autorelease];
  return self;
}
- (NigoriKeyBag_Builder*) clone {
  return [NigoriKeyBag builderWithPrototype:result];
}
- (NigoriKeyBag*) defaultInstance {
  return [NigoriKeyBag defaultInstance];
}
- (NigoriKeyBag*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (NigoriKeyBag*) buildPartial {
  NigoriKeyBag* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (NigoriKeyBag_Builder*) mergeFrom:(NigoriKeyBag*) other {
  if (other == [NigoriKeyBag defaultInstance]) {
    return self;
  }
  if (other.mutableKeyList.count > 0) {
    if (result.mutableKeyList == nil) {
      result.mutableKeyList = [NSMutableArray array];
    }
    [result.mutableKeyList addObjectsFromArray:other.mutableKeyList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (NigoriKeyBag_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (NigoriKeyBag_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 18: {
        NigoriKey_Builder* subBuilder = [NigoriKey builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addKey:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) keyList {
  if (result.mutableKeyList == nil) { return [NSArray array]; }
  return result.mutableKeyList;
}
- (NigoriKey*) keyAtIndex:(int32_t) index {
  return [result keyAtIndex:index];
}
- (NigoriKeyBag_Builder*) replaceKeyAtIndex:(int32_t) index with:(NigoriKey*) value {
  [result.mutableKeyList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (NigoriKeyBag_Builder*) addAllKey:(NSArray*) values {
  if (result.mutableKeyList == nil) {
    result.mutableKeyList = [NSMutableArray array];
  }
  [result.mutableKeyList addObjectsFromArray:values];
  return self;
}
- (NigoriKeyBag_Builder*) clearKeyList {
  result.mutableKeyList = nil;
  return self;
}
- (NigoriKeyBag_Builder*) addKey:(NigoriKey*) value {
  if (result.mutableKeyList == nil) {
    result.mutableKeyList = [NSMutableArray array];
  }
  [result.mutableKeyList addObject:value];
  return self;
}
@end

@interface DeviceInformation ()
@property (retain) NSString* cacheGuid;
@property (retain) NSString* name;
@property (retain) NSString* platform;
@property (retain) NSString* chromeVersion;
@end

@implementation DeviceInformation

- (BOOL) hasCacheGuid {
  return !!hasCacheGuid_;
}
- (void) setHasCacheGuid:(BOOL) value {
  hasCacheGuid_ = !!value;
}
@synthesize cacheGuid;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasPlatform {
  return !!hasPlatform_;
}
- (void) setHasPlatform:(BOOL) value {
  hasPlatform_ = !!value;
}
@synthesize platform;
- (BOOL) hasChromeVersion {
  return !!hasChromeVersion_;
}
- (void) setHasChromeVersion:(BOOL) value {
  hasChromeVersion_ = !!value;
}
@synthesize chromeVersion;
- (void) dealloc {
  self.cacheGuid = nil;
  self.name = nil;
  self.platform = nil;
  self.chromeVersion = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.cacheGuid = @"";
    self.name = @"";
    self.platform = @"";
    self.chromeVersion = @"";
  }
  return self;
}
static DeviceInformation* defaultDeviceInformationInstance = nil;
+ (void) initialize {
  if (self == [DeviceInformation class]) {
    defaultDeviceInformationInstance = [[DeviceInformation alloc] init];
  }
}
+ (DeviceInformation*) defaultInstance {
  return defaultDeviceInformationInstance;
}
- (DeviceInformation*) defaultInstance {
  return defaultDeviceInformationInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCacheGuid) {
    [output writeString:1 value:self.cacheGuid];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasPlatform) {
    [output writeString:3 value:self.platform];
  }
  if (self.hasChromeVersion) {
    [output writeString:4 value:self.chromeVersion];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCacheGuid) {
    size += computeStringSize(1, self.cacheGuid);
  }
  if (self.hasName) {
    size += computeStringSize(2, self.name);
  }
  if (self.hasPlatform) {
    size += computeStringSize(3, self.platform);
  }
  if (self.hasChromeVersion) {
    size += computeStringSize(4, self.chromeVersion);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (DeviceInformation*) parseFromData:(NSData*) data {
  return (DeviceInformation*)[[[DeviceInformation builder] mergeFromData:data] build];
}
+ (DeviceInformation*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DeviceInformation*)[[[DeviceInformation builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DeviceInformation*) parseFromInputStream:(NSInputStream*) input {
  return (DeviceInformation*)[[[DeviceInformation builder] mergeFromInputStream:input] build];
}
+ (DeviceInformation*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DeviceInformation*)[[[DeviceInformation builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DeviceInformation*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DeviceInformation*)[[[DeviceInformation builder] mergeFromCodedInputStream:input] build];
}
+ (DeviceInformation*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DeviceInformation*)[[[DeviceInformation builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DeviceInformation_Builder*) builder {
  return [[[DeviceInformation_Builder alloc] init] autorelease];
}
+ (DeviceInformation_Builder*) builderWithPrototype:(DeviceInformation*) prototype {
  return [[DeviceInformation builder] mergeFrom:prototype];
}
- (DeviceInformation_Builder*) builder {
  return [DeviceInformation builder];
}
@end

@interface DeviceInformation_Builder()
@property (retain) DeviceInformation* result;
@end

@implementation DeviceInformation_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[DeviceInformation alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (DeviceInformation_Builder*) clear {
  self.result = [[[DeviceInformation alloc] init] autorelease];
  return self;
}
- (DeviceInformation_Builder*) clone {
  return [DeviceInformation builderWithPrototype:result];
}
- (DeviceInformation*) defaultInstance {
  return [DeviceInformation defaultInstance];
}
- (DeviceInformation*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DeviceInformation*) buildPartial {
  DeviceInformation* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (DeviceInformation_Builder*) mergeFrom:(DeviceInformation*) other {
  if (other == [DeviceInformation defaultInstance]) {
    return self;
  }
  if (other.hasCacheGuid) {
    [self setCacheGuid:other.cacheGuid];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasPlatform) {
    [self setPlatform:other.platform];
  }
  if (other.hasChromeVersion) {
    [self setChromeVersion:other.chromeVersion];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DeviceInformation_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DeviceInformation_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCacheGuid:[input readString]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setPlatform:[input readString]];
        break;
      }
      case 34: {
        [self setChromeVersion:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCacheGuid {
  return result.hasCacheGuid;
}
- (NSString*) cacheGuid {
  return result.cacheGuid;
}
- (DeviceInformation_Builder*) setCacheGuid:(NSString*) value {
  result.hasCacheGuid = YES;
  result.cacheGuid = value;
  return self;
}
- (DeviceInformation_Builder*) clearCacheGuid {
  result.hasCacheGuid = NO;
  result.cacheGuid = @"";
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (DeviceInformation_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (DeviceInformation_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasPlatform {
  return result.hasPlatform;
}
- (NSString*) platform {
  return result.platform;
}
- (DeviceInformation_Builder*) setPlatform:(NSString*) value {
  result.hasPlatform = YES;
  result.platform = value;
  return self;
}
- (DeviceInformation_Builder*) clearPlatform {
  result.hasPlatform = NO;
  result.platform = @"";
  return self;
}
- (BOOL) hasChromeVersion {
  return result.hasChromeVersion;
}
- (NSString*) chromeVersion {
  return result.chromeVersion;
}
- (DeviceInformation_Builder*) setChromeVersion:(NSString*) value {
  result.hasChromeVersion = YES;
  result.chromeVersion = value;
  return self;
}
- (DeviceInformation_Builder*) clearChromeVersion {
  result.hasChromeVersion = NO;
  result.chromeVersion = @"";
  return self;
}
@end

@interface NigoriSpecifics ()
@property (retain) EncryptedData* encrypted;
@property BOOL usingExplicitPassphrase;
@property BOOL encryptBookmarks;
@property BOOL encryptPreferences;
@property BOOL encryptAutofillProfile;
@property BOOL encryptAutofill;
@property BOOL encryptThemes;
@property BOOL encryptTypedUrls;
@property BOOL encryptExtensions;
@property BOOL encryptSessions;
@property BOOL encryptApps;
@property BOOL encryptSearchEngines;
@property BOOL syncTabs;
@property BOOL encryptEverything;
@property BOOL encryptExtensionSettings;
@property BOOL encryptAppNotifications;
@property BOOL encryptAppSettings;
@property (retain) NSMutableArray* mutableDeviceInformationList;
@end

@implementation NigoriSpecifics

- (BOOL) hasEncrypted {
  return !!hasEncrypted_;
}
- (void) setHasEncrypted:(BOOL) value {
  hasEncrypted_ = !!value;
}
@synthesize encrypted;
- (BOOL) hasUsingExplicitPassphrase {
  return !!hasUsingExplicitPassphrase_;
}
- (void) setHasUsingExplicitPassphrase:(BOOL) value {
  hasUsingExplicitPassphrase_ = !!value;
}
- (BOOL) usingExplicitPassphrase {
  return !!usingExplicitPassphrase_;
}
- (void) setUsingExplicitPassphrase:(BOOL) value {
  usingExplicitPassphrase_ = !!value;
}
- (BOOL) hasEncryptBookmarks {
  return !!hasEncryptBookmarks_;
}
- (void) setHasEncryptBookmarks:(BOOL) value {
  hasEncryptBookmarks_ = !!value;
}
- (BOOL) encryptBookmarks {
  return !!encryptBookmarks_;
}
- (void) setEncryptBookmarks:(BOOL) value {
  encryptBookmarks_ = !!value;
}
- (BOOL) hasEncryptPreferences {
  return !!hasEncryptPreferences_;
}
- (void) setHasEncryptPreferences:(BOOL) value {
  hasEncryptPreferences_ = !!value;
}
- (BOOL) encryptPreferences {
  return !!encryptPreferences_;
}
- (void) setEncryptPreferences:(BOOL) value {
  encryptPreferences_ = !!value;
}
- (BOOL) hasEncryptAutofillProfile {
  return !!hasEncryptAutofillProfile_;
}
- (void) setHasEncryptAutofillProfile:(BOOL) value {
  hasEncryptAutofillProfile_ = !!value;
}
- (BOOL) encryptAutofillProfile {
  return !!encryptAutofillProfile_;
}
- (void) setEncryptAutofillProfile:(BOOL) value {
  encryptAutofillProfile_ = !!value;
}
- (BOOL) hasEncryptAutofill {
  return !!hasEncryptAutofill_;
}
- (void) setHasEncryptAutofill:(BOOL) value {
  hasEncryptAutofill_ = !!value;
}
- (BOOL) encryptAutofill {
  return !!encryptAutofill_;
}
- (void) setEncryptAutofill:(BOOL) value {
  encryptAutofill_ = !!value;
}
- (BOOL) hasEncryptThemes {
  return !!hasEncryptThemes_;
}
- (void) setHasEncryptThemes:(BOOL) value {
  hasEncryptThemes_ = !!value;
}
- (BOOL) encryptThemes {
  return !!encryptThemes_;
}
- (void) setEncryptThemes:(BOOL) value {
  encryptThemes_ = !!value;
}
- (BOOL) hasEncryptTypedUrls {
  return !!hasEncryptTypedUrls_;
}
- (void) setHasEncryptTypedUrls:(BOOL) value {
  hasEncryptTypedUrls_ = !!value;
}
- (BOOL) encryptTypedUrls {
  return !!encryptTypedUrls_;
}
- (void) setEncryptTypedUrls:(BOOL) value {
  encryptTypedUrls_ = !!value;
}
- (BOOL) hasEncryptExtensions {
  return !!hasEncryptExtensions_;
}
- (void) setHasEncryptExtensions:(BOOL) value {
  hasEncryptExtensions_ = !!value;
}
- (BOOL) encryptExtensions {
  return !!encryptExtensions_;
}
- (void) setEncryptExtensions:(BOOL) value {
  encryptExtensions_ = !!value;
}
- (BOOL) hasEncryptSessions {
  return !!hasEncryptSessions_;
}
- (void) setHasEncryptSessions:(BOOL) value {
  hasEncryptSessions_ = !!value;
}
- (BOOL) encryptSessions {
  return !!encryptSessions_;
}
- (void) setEncryptSessions:(BOOL) value {
  encryptSessions_ = !!value;
}
- (BOOL) hasEncryptApps {
  return !!hasEncryptApps_;
}
- (void) setHasEncryptApps:(BOOL) value {
  hasEncryptApps_ = !!value;
}
- (BOOL) encryptApps {
  return !!encryptApps_;
}
- (void) setEncryptApps:(BOOL) value {
  encryptApps_ = !!value;
}
- (BOOL) hasEncryptSearchEngines {
  return !!hasEncryptSearchEngines_;
}
- (void) setHasEncryptSearchEngines:(BOOL) value {
  hasEncryptSearchEngines_ = !!value;
}
- (BOOL) encryptSearchEngines {
  return !!encryptSearchEngines_;
}
- (void) setEncryptSearchEngines:(BOOL) value {
  encryptSearchEngines_ = !!value;
}
- (BOOL) hasSyncTabs {
  return !!hasSyncTabs_;
}
- (void) setHasSyncTabs:(BOOL) value {
  hasSyncTabs_ = !!value;
}
- (BOOL) syncTabs {
  return !!syncTabs_;
}
- (void) setSyncTabs:(BOOL) value {
  syncTabs_ = !!value;
}
- (BOOL) hasEncryptEverything {
  return !!hasEncryptEverything_;
}
- (void) setHasEncryptEverything:(BOOL) value {
  hasEncryptEverything_ = !!value;
}
- (BOOL) encryptEverything {
  return !!encryptEverything_;
}
- (void) setEncryptEverything:(BOOL) value {
  encryptEverything_ = !!value;
}
- (BOOL) hasEncryptExtensionSettings {
  return !!hasEncryptExtensionSettings_;
}
- (void) setHasEncryptExtensionSettings:(BOOL) value {
  hasEncryptExtensionSettings_ = !!value;
}
- (BOOL) encryptExtensionSettings {
  return !!encryptExtensionSettings_;
}
- (void) setEncryptExtensionSettings:(BOOL) value {
  encryptExtensionSettings_ = !!value;
}
- (BOOL) hasEncryptAppNotifications {
  return !!hasEncryptAppNotifications_;
}
- (void) setHasEncryptAppNotifications:(BOOL) value {
  hasEncryptAppNotifications_ = !!value;
}
- (BOOL) encryptAppNotifications {
  return !!encryptAppNotifications_;
}
- (void) setEncryptAppNotifications:(BOOL) value {
  encryptAppNotifications_ = !!value;
}
- (BOOL) hasEncryptAppSettings {
  return !!hasEncryptAppSettings_;
}
- (void) setHasEncryptAppSettings:(BOOL) value {
  hasEncryptAppSettings_ = !!value;
}
- (BOOL) encryptAppSettings {
  return !!encryptAppSettings_;
}
- (void) setEncryptAppSettings:(BOOL) value {
  encryptAppSettings_ = !!value;
}
@synthesize mutableDeviceInformationList;
- (void) dealloc {
  self.encrypted = nil;
  self.mutableDeviceInformationList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.encrypted = [EncryptedData defaultInstance];
    self.usingExplicitPassphrase = NO;
    self.encryptBookmarks = NO;
    self.encryptPreferences = NO;
    self.encryptAutofillProfile = NO;
    self.encryptAutofill = NO;
    self.encryptThemes = NO;
    self.encryptTypedUrls = NO;
    self.encryptExtensions = NO;
    self.encryptSessions = NO;
    self.encryptApps = NO;
    self.encryptSearchEngines = NO;
    self.syncTabs = NO;
    self.encryptEverything = NO;
    self.encryptExtensionSettings = NO;
    self.encryptAppNotifications = NO;
    self.encryptAppSettings = NO;
  }
  return self;
}
static NigoriSpecifics* defaultNigoriSpecificsInstance = nil;
+ (void) initialize {
  if (self == [NigoriSpecifics class]) {
    defaultNigoriSpecificsInstance = [[NigoriSpecifics alloc] init];
  }
}
+ (NigoriSpecifics*) defaultInstance {
  return defaultNigoriSpecificsInstance;
}
- (NigoriSpecifics*) defaultInstance {
  return defaultNigoriSpecificsInstance;
}
- (NSArray*) deviceInformationList {
  return mutableDeviceInformationList;
}
- (DeviceInformation*) deviceInformationAtIndex:(int32_t) index {
  id value = [mutableDeviceInformationList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEncrypted) {
    [output writeMessage:1 value:self.encrypted];
  }
  if (self.hasUsingExplicitPassphrase) {
    [output writeBool:2 value:self.usingExplicitPassphrase];
  }
  if (self.hasEncryptBookmarks) {
    [output writeBool:13 value:self.encryptBookmarks];
  }
  if (self.hasEncryptPreferences) {
    [output writeBool:14 value:self.encryptPreferences];
  }
  if (self.hasEncryptAutofillProfile) {
    [output writeBool:15 value:self.encryptAutofillProfile];
  }
  if (self.hasEncryptAutofill) {
    [output writeBool:16 value:self.encryptAutofill];
  }
  if (self.hasEncryptThemes) {
    [output writeBool:17 value:self.encryptThemes];
  }
  if (self.hasEncryptTypedUrls) {
    [output writeBool:18 value:self.encryptTypedUrls];
  }
  if (self.hasEncryptExtensions) {
    [output writeBool:19 value:self.encryptExtensions];
  }
  if (self.hasEncryptSessions) {
    [output writeBool:20 value:self.encryptSessions];
  }
  if (self.hasEncryptApps) {
    [output writeBool:21 value:self.encryptApps];
  }
  if (self.hasEncryptSearchEngines) {
    [output writeBool:22 value:self.encryptSearchEngines];
  }
  if (self.hasSyncTabs) {
    [output writeBool:23 value:self.syncTabs];
  }
  if (self.hasEncryptEverything) {
    [output writeBool:24 value:self.encryptEverything];
  }
  if (self.hasEncryptExtensionSettings) {
    [output writeBool:25 value:self.encryptExtensionSettings];
  }
  if (self.hasEncryptAppNotifications) {
    [output writeBool:26 value:self.encryptAppNotifications];
  }
  if (self.hasEncryptAppSettings) {
    [output writeBool:27 value:self.encryptAppSettings];
  }
  for (DeviceInformation* element in self.deviceInformationList) {
    [output writeMessage:28 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasEncrypted) {
    size += computeMessageSize(1, self.encrypted);
  }
  if (self.hasUsingExplicitPassphrase) {
    size += computeBoolSize(2, self.usingExplicitPassphrase);
  }
  if (self.hasEncryptBookmarks) {
    size += computeBoolSize(13, self.encryptBookmarks);
  }
  if (self.hasEncryptPreferences) {
    size += computeBoolSize(14, self.encryptPreferences);
  }
  if (self.hasEncryptAutofillProfile) {
    size += computeBoolSize(15, self.encryptAutofillProfile);
  }
  if (self.hasEncryptAutofill) {
    size += computeBoolSize(16, self.encryptAutofill);
  }
  if (self.hasEncryptThemes) {
    size += computeBoolSize(17, self.encryptThemes);
  }
  if (self.hasEncryptTypedUrls) {
    size += computeBoolSize(18, self.encryptTypedUrls);
  }
  if (self.hasEncryptExtensions) {
    size += computeBoolSize(19, self.encryptExtensions);
  }
  if (self.hasEncryptSessions) {
    size += computeBoolSize(20, self.encryptSessions);
  }
  if (self.hasEncryptApps) {
    size += computeBoolSize(21, self.encryptApps);
  }
  if (self.hasEncryptSearchEngines) {
    size += computeBoolSize(22, self.encryptSearchEngines);
  }
  if (self.hasSyncTabs) {
    size += computeBoolSize(23, self.syncTabs);
  }
  if (self.hasEncryptEverything) {
    size += computeBoolSize(24, self.encryptEverything);
  }
  if (self.hasEncryptExtensionSettings) {
    size += computeBoolSize(25, self.encryptExtensionSettings);
  }
  if (self.hasEncryptAppNotifications) {
    size += computeBoolSize(26, self.encryptAppNotifications);
  }
  if (self.hasEncryptAppSettings) {
    size += computeBoolSize(27, self.encryptAppSettings);
  }
  for (DeviceInformation* element in self.deviceInformationList) {
    size += computeMessageSize(28, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (NigoriSpecifics*) parseFromData:(NSData*) data {
  return (NigoriSpecifics*)[[[NigoriSpecifics builder] mergeFromData:data] build];
}
+ (NigoriSpecifics*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NigoriSpecifics*)[[[NigoriSpecifics builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (NigoriSpecifics*) parseFromInputStream:(NSInputStream*) input {
  return (NigoriSpecifics*)[[[NigoriSpecifics builder] mergeFromInputStream:input] build];
}
+ (NigoriSpecifics*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NigoriSpecifics*)[[[NigoriSpecifics builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NigoriSpecifics*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (NigoriSpecifics*)[[[NigoriSpecifics builder] mergeFromCodedInputStream:input] build];
}
+ (NigoriSpecifics*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NigoriSpecifics*)[[[NigoriSpecifics builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NigoriSpecifics_Builder*) builder {
  return [[[NigoriSpecifics_Builder alloc] init] autorelease];
}
+ (NigoriSpecifics_Builder*) builderWithPrototype:(NigoriSpecifics*) prototype {
  return [[NigoriSpecifics builder] mergeFrom:prototype];
}
- (NigoriSpecifics_Builder*) builder {
  return [NigoriSpecifics builder];
}
@end

@interface NigoriSpecifics_Builder()
@property (retain) NigoriSpecifics* result;
@end

@implementation NigoriSpecifics_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[NigoriSpecifics alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (NigoriSpecifics_Builder*) clear {
  self.result = [[[NigoriSpecifics alloc] init] autorelease];
  return self;
}
- (NigoriSpecifics_Builder*) clone {
  return [NigoriSpecifics builderWithPrototype:result];
}
- (NigoriSpecifics*) defaultInstance {
  return [NigoriSpecifics defaultInstance];
}
- (NigoriSpecifics*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (NigoriSpecifics*) buildPartial {
  NigoriSpecifics* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (NigoriSpecifics_Builder*) mergeFrom:(NigoriSpecifics*) other {
  if (other == [NigoriSpecifics defaultInstance]) {
    return self;
  }
  if (other.hasEncrypted) {
    [self mergeEncrypted:other.encrypted];
  }
  if (other.hasUsingExplicitPassphrase) {
    [self setUsingExplicitPassphrase:other.usingExplicitPassphrase];
  }
  if (other.hasEncryptBookmarks) {
    [self setEncryptBookmarks:other.encryptBookmarks];
  }
  if (other.hasEncryptPreferences) {
    [self setEncryptPreferences:other.encryptPreferences];
  }
  if (other.hasEncryptAutofillProfile) {
    [self setEncryptAutofillProfile:other.encryptAutofillProfile];
  }
  if (other.hasEncryptAutofill) {
    [self setEncryptAutofill:other.encryptAutofill];
  }
  if (other.hasEncryptThemes) {
    [self setEncryptThemes:other.encryptThemes];
  }
  if (other.hasEncryptTypedUrls) {
    [self setEncryptTypedUrls:other.encryptTypedUrls];
  }
  if (other.hasEncryptExtensions) {
    [self setEncryptExtensions:other.encryptExtensions];
  }
  if (other.hasEncryptSessions) {
    [self setEncryptSessions:other.encryptSessions];
  }
  if (other.hasEncryptApps) {
    [self setEncryptApps:other.encryptApps];
  }
  if (other.hasEncryptSearchEngines) {
    [self setEncryptSearchEngines:other.encryptSearchEngines];
  }
  if (other.hasSyncTabs) {
    [self setSyncTabs:other.syncTabs];
  }
  if (other.hasEncryptEverything) {
    [self setEncryptEverything:other.encryptEverything];
  }
  if (other.hasEncryptExtensionSettings) {
    [self setEncryptExtensionSettings:other.encryptExtensionSettings];
  }
  if (other.hasEncryptAppNotifications) {
    [self setEncryptAppNotifications:other.encryptAppNotifications];
  }
  if (other.hasEncryptAppSettings) {
    [self setEncryptAppSettings:other.encryptAppSettings];
  }
  if (other.mutableDeviceInformationList.count > 0) {
    if (result.mutableDeviceInformationList == nil) {
      result.mutableDeviceInformationList = [NSMutableArray array];
    }
    [result.mutableDeviceInformationList addObjectsFromArray:other.mutableDeviceInformationList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (NigoriSpecifics_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (NigoriSpecifics_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        EncryptedData_Builder* subBuilder = [EncryptedData builder];
        if (self.hasEncrypted) {
          [subBuilder mergeFrom:self.encrypted];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setEncrypted:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setUsingExplicitPassphrase:[input readBool]];
        break;
      }
      case 104: {
        [self setEncryptBookmarks:[input readBool]];
        break;
      }
      case 112: {
        [self setEncryptPreferences:[input readBool]];
        break;
      }
      case 120: {
        [self setEncryptAutofillProfile:[input readBool]];
        break;
      }
      case 128: {
        [self setEncryptAutofill:[input readBool]];
        break;
      }
      case 136: {
        [self setEncryptThemes:[input readBool]];
        break;
      }
      case 144: {
        [self setEncryptTypedUrls:[input readBool]];
        break;
      }
      case 152: {
        [self setEncryptExtensions:[input readBool]];
        break;
      }
      case 160: {
        [self setEncryptSessions:[input readBool]];
        break;
      }
      case 168: {
        [self setEncryptApps:[input readBool]];
        break;
      }
      case 176: {
        [self setEncryptSearchEngines:[input readBool]];
        break;
      }
      case 184: {
        [self setSyncTabs:[input readBool]];
        break;
      }
      case 192: {
        [self setEncryptEverything:[input readBool]];
        break;
      }
      case 200: {
        [self setEncryptExtensionSettings:[input readBool]];
        break;
      }
      case 208: {
        [self setEncryptAppNotifications:[input readBool]];
        break;
      }
      case 216: {
        [self setEncryptAppSettings:[input readBool]];
        break;
      }
      case 226: {
        DeviceInformation_Builder* subBuilder = [DeviceInformation builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDeviceInformation:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasEncrypted {
  return result.hasEncrypted;
}
- (EncryptedData*) encrypted {
  return result.encrypted;
}
- (NigoriSpecifics_Builder*) setEncrypted:(EncryptedData*) value {
  result.hasEncrypted = YES;
  result.encrypted = value;
  return self;
}
- (NigoriSpecifics_Builder*) setEncryptedBuilder:(EncryptedData_Builder*) builderForValue {
  return [self setEncrypted:[builderForValue build]];
}
- (NigoriSpecifics_Builder*) mergeEncrypted:(EncryptedData*) value {
  if (result.hasEncrypted &&
      result.encrypted != [EncryptedData defaultInstance]) {
    result.encrypted =
      [[[EncryptedData builderWithPrototype:result.encrypted] mergeFrom:value] buildPartial];
  } else {
    result.encrypted = value;
  }
  result.hasEncrypted = YES;
  return self;
}
- (NigoriSpecifics_Builder*) clearEncrypted {
  result.hasEncrypted = NO;
  result.encrypted = [EncryptedData defaultInstance];
  return self;
}
- (BOOL) hasUsingExplicitPassphrase {
  return result.hasUsingExplicitPassphrase;
}
- (BOOL) usingExplicitPassphrase {
  return result.usingExplicitPassphrase;
}
- (NigoriSpecifics_Builder*) setUsingExplicitPassphrase:(BOOL) value {
  result.hasUsingExplicitPassphrase = YES;
  result.usingExplicitPassphrase = value;
  return self;
}
- (NigoriSpecifics_Builder*) clearUsingExplicitPassphrase {
  result.hasUsingExplicitPassphrase = NO;
  result.usingExplicitPassphrase = NO;
  return self;
}
- (BOOL) hasEncryptBookmarks {
  return result.hasEncryptBookmarks;
}
- (BOOL) encryptBookmarks {
  return result.encryptBookmarks;
}
- (NigoriSpecifics_Builder*) setEncryptBookmarks:(BOOL) value {
  result.hasEncryptBookmarks = YES;
  result.encryptBookmarks = value;
  return self;
}
- (NigoriSpecifics_Builder*) clearEncryptBookmarks {
  result.hasEncryptBookmarks = NO;
  result.encryptBookmarks = NO;
  return self;
}
- (BOOL) hasEncryptPreferences {
  return result.hasEncryptPreferences;
}
- (BOOL) encryptPreferences {
  return result.encryptPreferences;
}
- (NigoriSpecifics_Builder*) setEncryptPreferences:(BOOL) value {
  result.hasEncryptPreferences = YES;
  result.encryptPreferences = value;
  return self;
}
- (NigoriSpecifics_Builder*) clearEncryptPreferences {
  result.hasEncryptPreferences = NO;
  result.encryptPreferences = NO;
  return self;
}
- (BOOL) hasEncryptAutofillProfile {
  return result.hasEncryptAutofillProfile;
}
- (BOOL) encryptAutofillProfile {
  return result.encryptAutofillProfile;
}
- (NigoriSpecifics_Builder*) setEncryptAutofillProfile:(BOOL) value {
  result.hasEncryptAutofillProfile = YES;
  result.encryptAutofillProfile = value;
  return self;
}
- (NigoriSpecifics_Builder*) clearEncryptAutofillProfile {
  result.hasEncryptAutofillProfile = NO;
  result.encryptAutofillProfile = NO;
  return self;
}
- (BOOL) hasEncryptAutofill {
  return result.hasEncryptAutofill;
}
- (BOOL) encryptAutofill {
  return result.encryptAutofill;
}
- (NigoriSpecifics_Builder*) setEncryptAutofill:(BOOL) value {
  result.hasEncryptAutofill = YES;
  result.encryptAutofill = value;
  return self;
}
- (NigoriSpecifics_Builder*) clearEncryptAutofill {
  result.hasEncryptAutofill = NO;
  result.encryptAutofill = NO;
  return self;
}
- (BOOL) hasEncryptThemes {
  return result.hasEncryptThemes;
}
- (BOOL) encryptThemes {
  return result.encryptThemes;
}
- (NigoriSpecifics_Builder*) setEncryptThemes:(BOOL) value {
  result.hasEncryptThemes = YES;
  result.encryptThemes = value;
  return self;
}
- (NigoriSpecifics_Builder*) clearEncryptThemes {
  result.hasEncryptThemes = NO;
  result.encryptThemes = NO;
  return self;
}
- (BOOL) hasEncryptTypedUrls {
  return result.hasEncryptTypedUrls;
}
- (BOOL) encryptTypedUrls {
  return result.encryptTypedUrls;
}
- (NigoriSpecifics_Builder*) setEncryptTypedUrls:(BOOL) value {
  result.hasEncryptTypedUrls = YES;
  result.encryptTypedUrls = value;
  return self;
}
- (NigoriSpecifics_Builder*) clearEncryptTypedUrls {
  result.hasEncryptTypedUrls = NO;
  result.encryptTypedUrls = NO;
  return self;
}
- (BOOL) hasEncryptExtensions {
  return result.hasEncryptExtensions;
}
- (BOOL) encryptExtensions {
  return result.encryptExtensions;
}
- (NigoriSpecifics_Builder*) setEncryptExtensions:(BOOL) value {
  result.hasEncryptExtensions = YES;
  result.encryptExtensions = value;
  return self;
}
- (NigoriSpecifics_Builder*) clearEncryptExtensions {
  result.hasEncryptExtensions = NO;
  result.encryptExtensions = NO;
  return self;
}
- (BOOL) hasEncryptSessions {
  return result.hasEncryptSessions;
}
- (BOOL) encryptSessions {
  return result.encryptSessions;
}
- (NigoriSpecifics_Builder*) setEncryptSessions:(BOOL) value {
  result.hasEncryptSessions = YES;
  result.encryptSessions = value;
  return self;
}
- (NigoriSpecifics_Builder*) clearEncryptSessions {
  result.hasEncryptSessions = NO;
  result.encryptSessions = NO;
  return self;
}
- (BOOL) hasEncryptApps {
  return result.hasEncryptApps;
}
- (BOOL) encryptApps {
  return result.encryptApps;
}
- (NigoriSpecifics_Builder*) setEncryptApps:(BOOL) value {
  result.hasEncryptApps = YES;
  result.encryptApps = value;
  return self;
}
- (NigoriSpecifics_Builder*) clearEncryptApps {
  result.hasEncryptApps = NO;
  result.encryptApps = NO;
  return self;
}
- (BOOL) hasEncryptSearchEngines {
  return result.hasEncryptSearchEngines;
}
- (BOOL) encryptSearchEngines {
  return result.encryptSearchEngines;
}
- (NigoriSpecifics_Builder*) setEncryptSearchEngines:(BOOL) value {
  result.hasEncryptSearchEngines = YES;
  result.encryptSearchEngines = value;
  return self;
}
- (NigoriSpecifics_Builder*) clearEncryptSearchEngines {
  result.hasEncryptSearchEngines = NO;
  result.encryptSearchEngines = NO;
  return self;
}
- (BOOL) hasSyncTabs {
  return result.hasSyncTabs;
}
- (BOOL) syncTabs {
  return result.syncTabs;
}
- (NigoriSpecifics_Builder*) setSyncTabs:(BOOL) value {
  result.hasSyncTabs = YES;
  result.syncTabs = value;
  return self;
}
- (NigoriSpecifics_Builder*) clearSyncTabs {
  result.hasSyncTabs = NO;
  result.syncTabs = NO;
  return self;
}
- (BOOL) hasEncryptEverything {
  return result.hasEncryptEverything;
}
- (BOOL) encryptEverything {
  return result.encryptEverything;
}
- (NigoriSpecifics_Builder*) setEncryptEverything:(BOOL) value {
  result.hasEncryptEverything = YES;
  result.encryptEverything = value;
  return self;
}
- (NigoriSpecifics_Builder*) clearEncryptEverything {
  result.hasEncryptEverything = NO;
  result.encryptEverything = NO;
  return self;
}
- (BOOL) hasEncryptExtensionSettings {
  return result.hasEncryptExtensionSettings;
}
- (BOOL) encryptExtensionSettings {
  return result.encryptExtensionSettings;
}
- (NigoriSpecifics_Builder*) setEncryptExtensionSettings:(BOOL) value {
  result.hasEncryptExtensionSettings = YES;
  result.encryptExtensionSettings = value;
  return self;
}
- (NigoriSpecifics_Builder*) clearEncryptExtensionSettings {
  result.hasEncryptExtensionSettings = NO;
  result.encryptExtensionSettings = NO;
  return self;
}
- (BOOL) hasEncryptAppNotifications {
  return result.hasEncryptAppNotifications;
}
- (BOOL) encryptAppNotifications {
  return result.encryptAppNotifications;
}
- (NigoriSpecifics_Builder*) setEncryptAppNotifications:(BOOL) value {
  result.hasEncryptAppNotifications = YES;
  result.encryptAppNotifications = value;
  return self;
}
- (NigoriSpecifics_Builder*) clearEncryptAppNotifications {
  result.hasEncryptAppNotifications = NO;
  result.encryptAppNotifications = NO;
  return self;
}
- (BOOL) hasEncryptAppSettings {
  return result.hasEncryptAppSettings;
}
- (BOOL) encryptAppSettings {
  return result.encryptAppSettings;
}
- (NigoriSpecifics_Builder*) setEncryptAppSettings:(BOOL) value {
  result.hasEncryptAppSettings = YES;
  result.encryptAppSettings = value;
  return self;
}
- (NigoriSpecifics_Builder*) clearEncryptAppSettings {
  result.hasEncryptAppSettings = NO;
  result.encryptAppSettings = NO;
  return self;
}
- (NSArray*) deviceInformationList {
  if (result.mutableDeviceInformationList == nil) { return [NSArray array]; }
  return result.mutableDeviceInformationList;
}
- (DeviceInformation*) deviceInformationAtIndex:(int32_t) index {
  return [result deviceInformationAtIndex:index];
}
- (NigoriSpecifics_Builder*) replaceDeviceInformationAtIndex:(int32_t) index with:(DeviceInformation*) value {
  [result.mutableDeviceInformationList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (NigoriSpecifics_Builder*) addAllDeviceInformation:(NSArray*) values {
  if (result.mutableDeviceInformationList == nil) {
    result.mutableDeviceInformationList = [NSMutableArray array];
  }
  [result.mutableDeviceInformationList addObjectsFromArray:values];
  return self;
}
- (NigoriSpecifics_Builder*) clearDeviceInformationList {
  result.mutableDeviceInformationList = nil;
  return self;
}
- (NigoriSpecifics_Builder*) addDeviceInformation:(DeviceInformation*) value {
  if (result.mutableDeviceInformationList == nil) {
    result.mutableDeviceInformationList = [NSMutableArray array];
  }
  [result.mutableDeviceInformationList addObject:value];
  return self;
}
@end

