// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "SessionSpecifics.pb.h"

@implementation SessionSpecificsRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [SessionSpecificsRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface SessionSpecifics ()
@property (retain) NSString* sessionTag;
@property (retain) SessionHeader* header;
@property (retain) SessionTab* tab;
@property int32_t tabNodeId;
@end

@implementation SessionSpecifics

- (BOOL) hasSessionTag {
  return !!hasSessionTag_;
}
- (void) setHasSessionTag:(BOOL) value {
  hasSessionTag_ = !!value;
}
@synthesize sessionTag;
- (BOOL) hasHeader {
  return !!hasHeader_;
}
- (void) setHasHeader:(BOOL) value {
  hasHeader_ = !!value;
}
@synthesize header;
- (BOOL) hasTab {
  return !!hasTab_;
}
- (void) setHasTab:(BOOL) value {
  hasTab_ = !!value;
}
@synthesize tab;
- (BOOL) hasTabNodeId {
  return !!hasTabNodeId_;
}
- (void) setHasTabNodeId:(BOOL) value {
  hasTabNodeId_ = !!value;
}
@synthesize tabNodeId;
- (void) dealloc {
  self.sessionTag = nil;
  self.header = nil;
  self.tab = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.sessionTag = @"";
    self.header = [SessionHeader defaultInstance];
    self.tab = [SessionTab defaultInstance];
    self.tabNodeId = -1;
  }
  return self;
}
static SessionSpecifics* defaultSessionSpecificsInstance = nil;
+ (void) initialize {
  if (self == [SessionSpecifics class]) {
    defaultSessionSpecificsInstance = [[SessionSpecifics alloc] init];
  }
}
+ (SessionSpecifics*) defaultInstance {
  return defaultSessionSpecificsInstance;
}
- (SessionSpecifics*) defaultInstance {
  return defaultSessionSpecificsInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSessionTag) {
    [output writeString:1 value:self.sessionTag];
  }
  if (self.hasHeader) {
    [output writeMessage:2 value:self.header];
  }
  if (self.hasTab) {
    [output writeMessage:3 value:self.tab];
  }
  if (self.hasTabNodeId) {
    [output writeInt32:4 value:self.tabNodeId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSessionTag) {
    size += computeStringSize(1, self.sessionTag);
  }
  if (self.hasHeader) {
    size += computeMessageSize(2, self.header);
  }
  if (self.hasTab) {
    size += computeMessageSize(3, self.tab);
  }
  if (self.hasTabNodeId) {
    size += computeInt32Size(4, self.tabNodeId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (SessionSpecifics*) parseFromData:(NSData*) data {
  return (SessionSpecifics*)[[[SessionSpecifics builder] mergeFromData:data] build];
}
+ (SessionSpecifics*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SessionSpecifics*)[[[SessionSpecifics builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SessionSpecifics*) parseFromInputStream:(NSInputStream*) input {
  return (SessionSpecifics*)[[[SessionSpecifics builder] mergeFromInputStream:input] build];
}
+ (SessionSpecifics*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SessionSpecifics*)[[[SessionSpecifics builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SessionSpecifics*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SessionSpecifics*)[[[SessionSpecifics builder] mergeFromCodedInputStream:input] build];
}
+ (SessionSpecifics*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SessionSpecifics*)[[[SessionSpecifics builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SessionSpecifics_Builder*) builder {
  return [[[SessionSpecifics_Builder alloc] init] autorelease];
}
+ (SessionSpecifics_Builder*) builderWithPrototype:(SessionSpecifics*) prototype {
  return [[SessionSpecifics builder] mergeFrom:prototype];
}
- (SessionSpecifics_Builder*) builder {
  return [SessionSpecifics builder];
}
@end

@interface SessionSpecifics_Builder()
@property (retain) SessionSpecifics* result;
@end

@implementation SessionSpecifics_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[SessionSpecifics alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (SessionSpecifics_Builder*) clear {
  self.result = [[[SessionSpecifics alloc] init] autorelease];
  return self;
}
- (SessionSpecifics_Builder*) clone {
  return [SessionSpecifics builderWithPrototype:result];
}
- (SessionSpecifics*) defaultInstance {
  return [SessionSpecifics defaultInstance];
}
- (SessionSpecifics*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SessionSpecifics*) buildPartial {
  SessionSpecifics* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (SessionSpecifics_Builder*) mergeFrom:(SessionSpecifics*) other {
  if (other == [SessionSpecifics defaultInstance]) {
    return self;
  }
  if (other.hasSessionTag) {
    [self setSessionTag:other.sessionTag];
  }
  if (other.hasHeader) {
    [self mergeHeader:other.header];
  }
  if (other.hasTab) {
    [self mergeTab:other.tab];
  }
  if (other.hasTabNodeId) {
    [self setTabNodeId:other.tabNodeId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SessionSpecifics_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SessionSpecifics_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSessionTag:[input readString]];
        break;
      }
      case 18: {
        SessionHeader_Builder* subBuilder = [SessionHeader builder];
        if (self.hasHeader) {
          [subBuilder mergeFrom:self.header];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setHeader:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        SessionTab_Builder* subBuilder = [SessionTab builder];
        if (self.hasTab) {
          [subBuilder mergeFrom:self.tab];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTab:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setTabNodeId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSessionTag {
  return result.hasSessionTag;
}
- (NSString*) sessionTag {
  return result.sessionTag;
}
- (SessionSpecifics_Builder*) setSessionTag:(NSString*) value {
  result.hasSessionTag = YES;
  result.sessionTag = value;
  return self;
}
- (SessionSpecifics_Builder*) clearSessionTag {
  result.hasSessionTag = NO;
  result.sessionTag = @"";
  return self;
}
- (BOOL) hasHeader {
  return result.hasHeader;
}
- (SessionHeader*) header {
  return result.header;
}
- (SessionSpecifics_Builder*) setHeader:(SessionHeader*) value {
  result.hasHeader = YES;
  result.header = value;
  return self;
}
- (SessionSpecifics_Builder*) setHeaderBuilder:(SessionHeader_Builder*) builderForValue {
  return [self setHeader:[builderForValue build]];
}
- (SessionSpecifics_Builder*) mergeHeader:(SessionHeader*) value {
  if (result.hasHeader &&
      result.header != [SessionHeader defaultInstance]) {
    result.header =
      [[[SessionHeader builderWithPrototype:result.header] mergeFrom:value] buildPartial];
  } else {
    result.header = value;
  }
  result.hasHeader = YES;
  return self;
}
- (SessionSpecifics_Builder*) clearHeader {
  result.hasHeader = NO;
  result.header = [SessionHeader defaultInstance];
  return self;
}
- (BOOL) hasTab {
  return result.hasTab;
}
- (SessionTab*) tab {
  return result.tab;
}
- (SessionSpecifics_Builder*) setTab:(SessionTab*) value {
  result.hasTab = YES;
  result.tab = value;
  return self;
}
- (SessionSpecifics_Builder*) setTabBuilder:(SessionTab_Builder*) builderForValue {
  return [self setTab:[builderForValue build]];
}
- (SessionSpecifics_Builder*) mergeTab:(SessionTab*) value {
  if (result.hasTab &&
      result.tab != [SessionTab defaultInstance]) {
    result.tab =
      [[[SessionTab builderWithPrototype:result.tab] mergeFrom:value] buildPartial];
  } else {
    result.tab = value;
  }
  result.hasTab = YES;
  return self;
}
- (SessionSpecifics_Builder*) clearTab {
  result.hasTab = NO;
  result.tab = [SessionTab defaultInstance];
  return self;
}
- (BOOL) hasTabNodeId {
  return result.hasTabNodeId;
}
- (int32_t) tabNodeId {
  return result.tabNodeId;
}
- (SessionSpecifics_Builder*) setTabNodeId:(int32_t) value {
  result.hasTabNodeId = YES;
  result.tabNodeId = value;
  return self;
}
- (SessionSpecifics_Builder*) clearTabNodeId {
  result.hasTabNodeId = NO;
  result.tabNodeId = -1;
  return self;
}
@end

@interface SessionHeader ()
@property (retain) NSMutableArray* mutableWindowList;
@property (retain) NSString* clientName;
@property SessionHeader_DeviceType deviceType;
@end

@implementation SessionHeader

@synthesize mutableWindowList;
- (BOOL) hasClientName {
  return !!hasClientName_;
}
- (void) setHasClientName:(BOOL) value {
  hasClientName_ = !!value;
}
@synthesize clientName;
- (BOOL) hasDeviceType {
  return !!hasDeviceType_;
}
- (void) setHasDeviceType:(BOOL) value {
  hasDeviceType_ = !!value;
}
@synthesize deviceType;
- (void) dealloc {
  self.mutableWindowList = nil;
  self.clientName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.clientName = @"";
    self.deviceType = SessionHeader_DeviceTypeTypeWin;
  }
  return self;
}
static SessionHeader* defaultSessionHeaderInstance = nil;
+ (void) initialize {
  if (self == [SessionHeader class]) {
    defaultSessionHeaderInstance = [[SessionHeader alloc] init];
  }
}
+ (SessionHeader*) defaultInstance {
  return defaultSessionHeaderInstance;
}
- (SessionHeader*) defaultInstance {
  return defaultSessionHeaderInstance;
}
- (NSArray*) windowList {
  return mutableWindowList;
}
- (SessionWindow*) windowAtIndex:(int32_t) index {
  id value = [mutableWindowList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (SessionWindow* element in self.windowList) {
    [output writeMessage:2 value:element];
  }
  if (self.hasClientName) {
    [output writeString:3 value:self.clientName];
  }
  if (self.hasDeviceType) {
    [output writeEnum:4 value:self.deviceType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (SessionWindow* element in self.windowList) {
    size += computeMessageSize(2, element);
  }
  if (self.hasClientName) {
    size += computeStringSize(3, self.clientName);
  }
  if (self.hasDeviceType) {
    size += computeEnumSize(4, self.deviceType);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (SessionHeader*) parseFromData:(NSData*) data {
  return (SessionHeader*)[[[SessionHeader builder] mergeFromData:data] build];
}
+ (SessionHeader*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SessionHeader*)[[[SessionHeader builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SessionHeader*) parseFromInputStream:(NSInputStream*) input {
  return (SessionHeader*)[[[SessionHeader builder] mergeFromInputStream:input] build];
}
+ (SessionHeader*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SessionHeader*)[[[SessionHeader builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SessionHeader*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SessionHeader*)[[[SessionHeader builder] mergeFromCodedInputStream:input] build];
}
+ (SessionHeader*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SessionHeader*)[[[SessionHeader builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SessionHeader_Builder*) builder {
  return [[[SessionHeader_Builder alloc] init] autorelease];
}
+ (SessionHeader_Builder*) builderWithPrototype:(SessionHeader*) prototype {
  return [[SessionHeader builder] mergeFrom:prototype];
}
- (SessionHeader_Builder*) builder {
  return [SessionHeader builder];
}
@end

BOOL SessionHeader_DeviceTypeIsValidValue(SessionHeader_DeviceType value) {
  switch (value) {
    case SessionHeader_DeviceTypeTypeWin:
    case SessionHeader_DeviceTypeTypeMac:
    case SessionHeader_DeviceTypeTypeLinux:
    case SessionHeader_DeviceTypeTypeCros:
    case SessionHeader_DeviceTypeTypeOther:
    case SessionHeader_DeviceTypeTypePhone:
    case SessionHeader_DeviceTypeTypeTablet:
      return YES;
    default:
      return NO;
  }
}
@interface SessionHeader_Builder()
@property (retain) SessionHeader* result;
@end

@implementation SessionHeader_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[SessionHeader alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (SessionHeader_Builder*) clear {
  self.result = [[[SessionHeader alloc] init] autorelease];
  return self;
}
- (SessionHeader_Builder*) clone {
  return [SessionHeader builderWithPrototype:result];
}
- (SessionHeader*) defaultInstance {
  return [SessionHeader defaultInstance];
}
- (SessionHeader*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SessionHeader*) buildPartial {
  SessionHeader* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (SessionHeader_Builder*) mergeFrom:(SessionHeader*) other {
  if (other == [SessionHeader defaultInstance]) {
    return self;
  }
  if (other.mutableWindowList.count > 0) {
    if (result.mutableWindowList == nil) {
      result.mutableWindowList = [NSMutableArray array];
    }
    [result.mutableWindowList addObjectsFromArray:other.mutableWindowList];
  }
  if (other.hasClientName) {
    [self setClientName:other.clientName];
  }
  if (other.hasDeviceType) {
    [self setDeviceType:other.deviceType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SessionHeader_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SessionHeader_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 18: {
        SessionWindow_Builder* subBuilder = [SessionWindow builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addWindow:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        [self setClientName:[input readString]];
        break;
      }
      case 32: {
        int32_t value = [input readEnum];
        if (SessionHeader_DeviceTypeIsValidValue(value)) {
          [self setDeviceType:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
    }
  }
}
- (NSArray*) windowList {
  if (result.mutableWindowList == nil) { return [NSArray array]; }
  return result.mutableWindowList;
}
- (SessionWindow*) windowAtIndex:(int32_t) index {
  return [result windowAtIndex:index];
}
- (SessionHeader_Builder*) replaceWindowAtIndex:(int32_t) index with:(SessionWindow*) value {
  [result.mutableWindowList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (SessionHeader_Builder*) addAllWindow:(NSArray*) values {
  if (result.mutableWindowList == nil) {
    result.mutableWindowList = [NSMutableArray array];
  }
  [result.mutableWindowList addObjectsFromArray:values];
  return self;
}
- (SessionHeader_Builder*) clearWindowList {
  result.mutableWindowList = nil;
  return self;
}
- (SessionHeader_Builder*) addWindow:(SessionWindow*) value {
  if (result.mutableWindowList == nil) {
    result.mutableWindowList = [NSMutableArray array];
  }
  [result.mutableWindowList addObject:value];
  return self;
}
- (BOOL) hasClientName {
  return result.hasClientName;
}
- (NSString*) clientName {
  return result.clientName;
}
- (SessionHeader_Builder*) setClientName:(NSString*) value {
  result.hasClientName = YES;
  result.clientName = value;
  return self;
}
- (SessionHeader_Builder*) clearClientName {
  result.hasClientName = NO;
  result.clientName = @"";
  return self;
}
- (BOOL) hasDeviceType {
  return result.hasDeviceType;
}
- (SessionHeader_DeviceType) deviceType {
  return result.deviceType;
}
- (SessionHeader_Builder*) setDeviceType:(SessionHeader_DeviceType) value {
  result.hasDeviceType = YES;
  result.deviceType = value;
  return self;
}
- (SessionHeader_Builder*) clearDeviceType {
  result.hasDeviceType = NO;
  result.deviceType = SessionHeader_DeviceTypeTypeWin;
  return self;
}
@end

@interface SessionWindow ()
@property int32_t windowId;
@property int32_t selectedTabIndex;
@property SessionWindow_BrowserType browserType;
@property (retain) NSMutableArray* mutableTabList;
@end

@implementation SessionWindow

- (BOOL) hasWindowId {
  return !!hasWindowId_;
}
- (void) setHasWindowId:(BOOL) value {
  hasWindowId_ = !!value;
}
@synthesize windowId;
- (BOOL) hasSelectedTabIndex {
  return !!hasSelectedTabIndex_;
}
- (void) setHasSelectedTabIndex:(BOOL) value {
  hasSelectedTabIndex_ = !!value;
}
@synthesize selectedTabIndex;
- (BOOL) hasBrowserType {
  return !!hasBrowserType_;
}
- (void) setHasBrowserType:(BOOL) value {
  hasBrowserType_ = !!value;
}
@synthesize browserType;
@synthesize mutableTabList;
- (void) dealloc {
  self.mutableTabList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.windowId = 0;
    self.selectedTabIndex = -1;
    self.browserType = SessionWindow_BrowserTypeTypeTabbed;
  }
  return self;
}
static SessionWindow* defaultSessionWindowInstance = nil;
+ (void) initialize {
  if (self == [SessionWindow class]) {
    defaultSessionWindowInstance = [[SessionWindow alloc] init];
  }
}
+ (SessionWindow*) defaultInstance {
  return defaultSessionWindowInstance;
}
- (SessionWindow*) defaultInstance {
  return defaultSessionWindowInstance;
}
- (NSArray*) tabList {
  return mutableTabList;
}
- (int32_t) tabAtIndex:(int32_t) index {
  id value = [mutableTabList objectAtIndex:index];
  return [value intValue];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasWindowId) {
    [output writeInt32:1 value:self.windowId];
  }
  if (self.hasSelectedTabIndex) {
    [output writeInt32:2 value:self.selectedTabIndex];
  }
  if (self.hasBrowserType) {
    [output writeEnum:3 value:self.browserType];
  }
  for (NSNumber* value in self.mutableTabList) {
    [output writeInt32:4 value:[value intValue]];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasWindowId) {
    size += computeInt32Size(1, self.windowId);
  }
  if (self.hasSelectedTabIndex) {
    size += computeInt32Size(2, self.selectedTabIndex);
  }
  if (self.hasBrowserType) {
    size += computeEnumSize(3, self.browserType);
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableTabList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    size += 1 * self.mutableTabList.count;
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (SessionWindow*) parseFromData:(NSData*) data {
  return (SessionWindow*)[[[SessionWindow builder] mergeFromData:data] build];
}
+ (SessionWindow*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SessionWindow*)[[[SessionWindow builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SessionWindow*) parseFromInputStream:(NSInputStream*) input {
  return (SessionWindow*)[[[SessionWindow builder] mergeFromInputStream:input] build];
}
+ (SessionWindow*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SessionWindow*)[[[SessionWindow builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SessionWindow*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SessionWindow*)[[[SessionWindow builder] mergeFromCodedInputStream:input] build];
}
+ (SessionWindow*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SessionWindow*)[[[SessionWindow builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SessionWindow_Builder*) builder {
  return [[[SessionWindow_Builder alloc] init] autorelease];
}
+ (SessionWindow_Builder*) builderWithPrototype:(SessionWindow*) prototype {
  return [[SessionWindow builder] mergeFrom:prototype];
}
- (SessionWindow_Builder*) builder {
  return [SessionWindow builder];
}
@end

BOOL SessionWindow_BrowserTypeIsValidValue(SessionWindow_BrowserType value) {
  switch (value) {
    case SessionWindow_BrowserTypeTypeTabbed:
    case SessionWindow_BrowserTypeTypePopup:
      return YES;
    default:
      return NO;
  }
}
@interface SessionWindow_Builder()
@property (retain) SessionWindow* result;
@end

@implementation SessionWindow_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[SessionWindow alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (SessionWindow_Builder*) clear {
  self.result = [[[SessionWindow alloc] init] autorelease];
  return self;
}
- (SessionWindow_Builder*) clone {
  return [SessionWindow builderWithPrototype:result];
}
- (SessionWindow*) defaultInstance {
  return [SessionWindow defaultInstance];
}
- (SessionWindow*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SessionWindow*) buildPartial {
  SessionWindow* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (SessionWindow_Builder*) mergeFrom:(SessionWindow*) other {
  if (other == [SessionWindow defaultInstance]) {
    return self;
  }
  if (other.hasWindowId) {
    [self setWindowId:other.windowId];
  }
  if (other.hasSelectedTabIndex) {
    [self setSelectedTabIndex:other.selectedTabIndex];
  }
  if (other.hasBrowserType) {
    [self setBrowserType:other.browserType];
  }
  if (other.mutableTabList.count > 0) {
    if (result.mutableTabList == nil) {
      result.mutableTabList = [NSMutableArray array];
    }
    [result.mutableTabList addObjectsFromArray:other.mutableTabList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SessionWindow_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SessionWindow_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setWindowId:[input readInt32]];
        break;
      }
      case 16: {
        [self setSelectedTabIndex:[input readInt32]];
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (SessionWindow_BrowserTypeIsValidValue(value)) {
          [self setBrowserType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 32: {
        [self addTab:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasWindowId {
  return result.hasWindowId;
}
- (int32_t) windowId {
  return result.windowId;
}
- (SessionWindow_Builder*) setWindowId:(int32_t) value {
  result.hasWindowId = YES;
  result.windowId = value;
  return self;
}
- (SessionWindow_Builder*) clearWindowId {
  result.hasWindowId = NO;
  result.windowId = 0;
  return self;
}
- (BOOL) hasSelectedTabIndex {
  return result.hasSelectedTabIndex;
}
- (int32_t) selectedTabIndex {
  return result.selectedTabIndex;
}
- (SessionWindow_Builder*) setSelectedTabIndex:(int32_t) value {
  result.hasSelectedTabIndex = YES;
  result.selectedTabIndex = value;
  return self;
}
- (SessionWindow_Builder*) clearSelectedTabIndex {
  result.hasSelectedTabIndex = NO;
  result.selectedTabIndex = -1;
  return self;
}
- (BOOL) hasBrowserType {
  return result.hasBrowserType;
}
- (SessionWindow_BrowserType) browserType {
  return result.browserType;
}
- (SessionWindow_Builder*) setBrowserType:(SessionWindow_BrowserType) value {
  result.hasBrowserType = YES;
  result.browserType = value;
  return self;
}
- (SessionWindow_Builder*) clearBrowserType {
  result.hasBrowserType = NO;
  result.browserType = SessionWindow_BrowserTypeTypeTabbed;
  return self;
}
- (NSArray*) tabList {
  if (result.mutableTabList == nil) {
    return [NSArray array];
  }
  return result.mutableTabList;
}
- (int32_t) tabAtIndex:(int32_t) index {
  return [result tabAtIndex:index];
}
- (SessionWindow_Builder*) replaceTabAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableTabList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (SessionWindow_Builder*) addTab:(int32_t) value {
  if (result.mutableTabList == nil) {
    result.mutableTabList = [NSMutableArray array];
  }
  [result.mutableTabList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (SessionWindow_Builder*) addAllTab:(NSArray*) values {
  if (result.mutableTabList == nil) {
    result.mutableTabList = [NSMutableArray array];
  }
  [result.mutableTabList addObjectsFromArray:values];
  return self;
}
- (SessionWindow_Builder*) clearTabList {
  result.mutableTabList = nil;
  return self;
}
@end

@interface SessionTab ()
@property int32_t tabId;
@property int32_t windowId;
@property int32_t tabVisualIndex;
@property int32_t currentNavigationIndex;
@property BOOL pinned;
@property (retain) NSString* extensionAppId;
@property (retain) NSMutableArray* mutableNavigationList;
@end

@implementation SessionTab

- (BOOL) hasTabId {
  return !!hasTabId_;
}
- (void) setHasTabId:(BOOL) value {
  hasTabId_ = !!value;
}
@synthesize tabId;
- (BOOL) hasWindowId {
  return !!hasWindowId_;
}
- (void) setHasWindowId:(BOOL) value {
  hasWindowId_ = !!value;
}
@synthesize windowId;
- (BOOL) hasTabVisualIndex {
  return !!hasTabVisualIndex_;
}
- (void) setHasTabVisualIndex:(BOOL) value {
  hasTabVisualIndex_ = !!value;
}
@synthesize tabVisualIndex;
- (BOOL) hasCurrentNavigationIndex {
  return !!hasCurrentNavigationIndex_;
}
- (void) setHasCurrentNavigationIndex:(BOOL) value {
  hasCurrentNavigationIndex_ = !!value;
}
@synthesize currentNavigationIndex;
- (BOOL) hasPinned {
  return !!hasPinned_;
}
- (void) setHasPinned:(BOOL) value {
  hasPinned_ = !!value;
}
- (BOOL) pinned {
  return !!pinned_;
}
- (void) setPinned:(BOOL) value {
  pinned_ = !!value;
}
- (BOOL) hasExtensionAppId {
  return !!hasExtensionAppId_;
}
- (void) setHasExtensionAppId:(BOOL) value {
  hasExtensionAppId_ = !!value;
}
@synthesize extensionAppId;
@synthesize mutableNavigationList;
- (void) dealloc {
  self.extensionAppId = nil;
  self.mutableNavigationList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.tabId = 0;
    self.windowId = 0;
    self.tabVisualIndex = -1;
    self.currentNavigationIndex = -1;
    self.pinned = NO;
    self.extensionAppId = @"";
  }
  return self;
}
static SessionTab* defaultSessionTabInstance = nil;
+ (void) initialize {
  if (self == [SessionTab class]) {
    defaultSessionTabInstance = [[SessionTab alloc] init];
  }
}
+ (SessionTab*) defaultInstance {
  return defaultSessionTabInstance;
}
- (SessionTab*) defaultInstance {
  return defaultSessionTabInstance;
}
- (NSArray*) navigationList {
  return mutableNavigationList;
}
- (TabNavigation*) navigationAtIndex:(int32_t) index {
  id value = [mutableNavigationList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTabId) {
    [output writeInt32:1 value:self.tabId];
  }
  if (self.hasWindowId) {
    [output writeInt32:2 value:self.windowId];
  }
  if (self.hasTabVisualIndex) {
    [output writeInt32:3 value:self.tabVisualIndex];
  }
  if (self.hasCurrentNavigationIndex) {
    [output writeInt32:4 value:self.currentNavigationIndex];
  }
  if (self.hasPinned) {
    [output writeBool:5 value:self.pinned];
  }
  if (self.hasExtensionAppId) {
    [output writeString:6 value:self.extensionAppId];
  }
  for (TabNavigation* element in self.navigationList) {
    [output writeMessage:7 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasTabId) {
    size += computeInt32Size(1, self.tabId);
  }
  if (self.hasWindowId) {
    size += computeInt32Size(2, self.windowId);
  }
  if (self.hasTabVisualIndex) {
    size += computeInt32Size(3, self.tabVisualIndex);
  }
  if (self.hasCurrentNavigationIndex) {
    size += computeInt32Size(4, self.currentNavigationIndex);
  }
  if (self.hasPinned) {
    size += computeBoolSize(5, self.pinned);
  }
  if (self.hasExtensionAppId) {
    size += computeStringSize(6, self.extensionAppId);
  }
  for (TabNavigation* element in self.navigationList) {
    size += computeMessageSize(7, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (SessionTab*) parseFromData:(NSData*) data {
  return (SessionTab*)[[[SessionTab builder] mergeFromData:data] build];
}
+ (SessionTab*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SessionTab*)[[[SessionTab builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SessionTab*) parseFromInputStream:(NSInputStream*) input {
  return (SessionTab*)[[[SessionTab builder] mergeFromInputStream:input] build];
}
+ (SessionTab*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SessionTab*)[[[SessionTab builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SessionTab*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SessionTab*)[[[SessionTab builder] mergeFromCodedInputStream:input] build];
}
+ (SessionTab*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SessionTab*)[[[SessionTab builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SessionTab_Builder*) builder {
  return [[[SessionTab_Builder alloc] init] autorelease];
}
+ (SessionTab_Builder*) builderWithPrototype:(SessionTab*) prototype {
  return [[SessionTab builder] mergeFrom:prototype];
}
- (SessionTab_Builder*) builder {
  return [SessionTab builder];
}
@end

@interface SessionTab_Builder()
@property (retain) SessionTab* result;
@end

@implementation SessionTab_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[SessionTab alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (SessionTab_Builder*) clear {
  self.result = [[[SessionTab alloc] init] autorelease];
  return self;
}
- (SessionTab_Builder*) clone {
  return [SessionTab builderWithPrototype:result];
}
- (SessionTab*) defaultInstance {
  return [SessionTab defaultInstance];
}
- (SessionTab*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SessionTab*) buildPartial {
  SessionTab* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (SessionTab_Builder*) mergeFrom:(SessionTab*) other {
  if (other == [SessionTab defaultInstance]) {
    return self;
  }
  if (other.hasTabId) {
    [self setTabId:other.tabId];
  }
  if (other.hasWindowId) {
    [self setWindowId:other.windowId];
  }
  if (other.hasTabVisualIndex) {
    [self setTabVisualIndex:other.tabVisualIndex];
  }
  if (other.hasCurrentNavigationIndex) {
    [self setCurrentNavigationIndex:other.currentNavigationIndex];
  }
  if (other.hasPinned) {
    [self setPinned:other.pinned];
  }
  if (other.hasExtensionAppId) {
    [self setExtensionAppId:other.extensionAppId];
  }
  if (other.mutableNavigationList.count > 0) {
    if (result.mutableNavigationList == nil) {
      result.mutableNavigationList = [NSMutableArray array];
    }
    [result.mutableNavigationList addObjectsFromArray:other.mutableNavigationList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SessionTab_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SessionTab_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTabId:[input readInt32]];
        break;
      }
      case 16: {
        [self setWindowId:[input readInt32]];
        break;
      }
      case 24: {
        [self setTabVisualIndex:[input readInt32]];
        break;
      }
      case 32: {
        [self setCurrentNavigationIndex:[input readInt32]];
        break;
      }
      case 40: {
        [self setPinned:[input readBool]];
        break;
      }
      case 50: {
        [self setExtensionAppId:[input readString]];
        break;
      }
      case 58: {
        TabNavigation_Builder* subBuilder = [TabNavigation builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addNavigation:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasTabId {
  return result.hasTabId;
}
- (int32_t) tabId {
  return result.tabId;
}
- (SessionTab_Builder*) setTabId:(int32_t) value {
  result.hasTabId = YES;
  result.tabId = value;
  return self;
}
- (SessionTab_Builder*) clearTabId {
  result.hasTabId = NO;
  result.tabId = 0;
  return self;
}
- (BOOL) hasWindowId {
  return result.hasWindowId;
}
- (int32_t) windowId {
  return result.windowId;
}
- (SessionTab_Builder*) setWindowId:(int32_t) value {
  result.hasWindowId = YES;
  result.windowId = value;
  return self;
}
- (SessionTab_Builder*) clearWindowId {
  result.hasWindowId = NO;
  result.windowId = 0;
  return self;
}
- (BOOL) hasTabVisualIndex {
  return result.hasTabVisualIndex;
}
- (int32_t) tabVisualIndex {
  return result.tabVisualIndex;
}
- (SessionTab_Builder*) setTabVisualIndex:(int32_t) value {
  result.hasTabVisualIndex = YES;
  result.tabVisualIndex = value;
  return self;
}
- (SessionTab_Builder*) clearTabVisualIndex {
  result.hasTabVisualIndex = NO;
  result.tabVisualIndex = -1;
  return self;
}
- (BOOL) hasCurrentNavigationIndex {
  return result.hasCurrentNavigationIndex;
}
- (int32_t) currentNavigationIndex {
  return result.currentNavigationIndex;
}
- (SessionTab_Builder*) setCurrentNavigationIndex:(int32_t) value {
  result.hasCurrentNavigationIndex = YES;
  result.currentNavigationIndex = value;
  return self;
}
- (SessionTab_Builder*) clearCurrentNavigationIndex {
  result.hasCurrentNavigationIndex = NO;
  result.currentNavigationIndex = -1;
  return self;
}
- (BOOL) hasPinned {
  return result.hasPinned;
}
- (BOOL) pinned {
  return result.pinned;
}
- (SessionTab_Builder*) setPinned:(BOOL) value {
  result.hasPinned = YES;
  result.pinned = value;
  return self;
}
- (SessionTab_Builder*) clearPinned {
  result.hasPinned = NO;
  result.pinned = NO;
  return self;
}
- (BOOL) hasExtensionAppId {
  return result.hasExtensionAppId;
}
- (NSString*) extensionAppId {
  return result.extensionAppId;
}
- (SessionTab_Builder*) setExtensionAppId:(NSString*) value {
  result.hasExtensionAppId = YES;
  result.extensionAppId = value;
  return self;
}
- (SessionTab_Builder*) clearExtensionAppId {
  result.hasExtensionAppId = NO;
  result.extensionAppId = @"";
  return self;
}
- (NSArray*) navigationList {
  if (result.mutableNavigationList == nil) { return [NSArray array]; }
  return result.mutableNavigationList;
}
- (TabNavigation*) navigationAtIndex:(int32_t) index {
  return [result navigationAtIndex:index];
}
- (SessionTab_Builder*) replaceNavigationAtIndex:(int32_t) index with:(TabNavigation*) value {
  [result.mutableNavigationList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (SessionTab_Builder*) addAllNavigation:(NSArray*) values {
  if (result.mutableNavigationList == nil) {
    result.mutableNavigationList = [NSMutableArray array];
  }
  [result.mutableNavigationList addObjectsFromArray:values];
  return self;
}
- (SessionTab_Builder*) clearNavigationList {
  result.mutableNavigationList = nil;
  return self;
}
- (SessionTab_Builder*) addNavigation:(TabNavigation*) value {
  if (result.mutableNavigationList == nil) {
    result.mutableNavigationList = [NSMutableArray array];
  }
  [result.mutableNavigationList addObject:value];
  return self;
}
@end

@interface TabNavigation ()
@property int32_t index;
@property (retain) NSString* virtualUrl;
@property (retain) NSString* referrer;
@property (retain) NSString* title;
@property (retain) NSString* state;
@property TabNavigation_PageTransition pageTransition;
@property TabNavigation_PageTransitionQualifier navigationQualifier;
@end

@implementation TabNavigation

- (BOOL) hasIndex {
  return !!hasIndex_;
}
- (void) setHasIndex:(BOOL) value {
  hasIndex_ = !!value;
}
@synthesize index;
- (BOOL) hasVirtualUrl {
  return !!hasVirtualUrl_;
}
- (void) setHasVirtualUrl:(BOOL) value {
  hasVirtualUrl_ = !!value;
}
@synthesize virtualUrl;
- (BOOL) hasReferrer {
  return !!hasReferrer_;
}
- (void) setHasReferrer:(BOOL) value {
  hasReferrer_ = !!value;
}
@synthesize referrer;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) value {
  hasTitle_ = !!value;
}
@synthesize title;
- (BOOL) hasState {
  return !!hasState_;
}
- (void) setHasState:(BOOL) value {
  hasState_ = !!value;
}
@synthesize state;
- (BOOL) hasPageTransition {
  return !!hasPageTransition_;
}
- (void) setHasPageTransition:(BOOL) value {
  hasPageTransition_ = !!value;
}
@synthesize pageTransition;
- (BOOL) hasNavigationQualifier {
  return !!hasNavigationQualifier_;
}
- (void) setHasNavigationQualifier:(BOOL) value {
  hasNavigationQualifier_ = !!value;
}
@synthesize navigationQualifier;
- (void) dealloc {
  self.virtualUrl = nil;
  self.referrer = nil;
  self.title = nil;
  self.state = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.index = -1;
    self.virtualUrl = @"";
    self.referrer = @"";
    self.title = @"";
    self.state = @"";
    self.pageTransition = TabNavigation_PageTransitionTyped;
    self.navigationQualifier = TabNavigation_PageTransitionQualifierClientRedirect;
  }
  return self;
}
static TabNavigation* defaultTabNavigationInstance = nil;
+ (void) initialize {
  if (self == [TabNavigation class]) {
    defaultTabNavigationInstance = [[TabNavigation alloc] init];
  }
}
+ (TabNavigation*) defaultInstance {
  return defaultTabNavigationInstance;
}
- (TabNavigation*) defaultInstance {
  return defaultTabNavigationInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasIndex) {
    [output writeInt32:1 value:self.index];
  }
  if (self.hasVirtualUrl) {
    [output writeString:2 value:self.virtualUrl];
  }
  if (self.hasReferrer) {
    [output writeString:3 value:self.referrer];
  }
  if (self.hasTitle) {
    [output writeString:4 value:self.title];
  }
  if (self.hasState) {
    [output writeString:5 value:self.state];
  }
  if (self.hasPageTransition) {
    [output writeEnum:6 value:self.pageTransition];
  }
  if (self.hasNavigationQualifier) {
    [output writeEnum:7 value:self.navigationQualifier];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasIndex) {
    size += computeInt32Size(1, self.index);
  }
  if (self.hasVirtualUrl) {
    size += computeStringSize(2, self.virtualUrl);
  }
  if (self.hasReferrer) {
    size += computeStringSize(3, self.referrer);
  }
  if (self.hasTitle) {
    size += computeStringSize(4, self.title);
  }
  if (self.hasState) {
    size += computeStringSize(5, self.state);
  }
  if (self.hasPageTransition) {
    size += computeEnumSize(6, self.pageTransition);
  }
  if (self.hasNavigationQualifier) {
    size += computeEnumSize(7, self.navigationQualifier);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (TabNavigation*) parseFromData:(NSData*) data {
  return (TabNavigation*)[[[TabNavigation builder] mergeFromData:data] build];
}
+ (TabNavigation*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TabNavigation*)[[[TabNavigation builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TabNavigation*) parseFromInputStream:(NSInputStream*) input {
  return (TabNavigation*)[[[TabNavigation builder] mergeFromInputStream:input] build];
}
+ (TabNavigation*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TabNavigation*)[[[TabNavigation builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TabNavigation*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TabNavigation*)[[[TabNavigation builder] mergeFromCodedInputStream:input] build];
}
+ (TabNavigation*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TabNavigation*)[[[TabNavigation builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TabNavigation_Builder*) builder {
  return [[[TabNavigation_Builder alloc] init] autorelease];
}
+ (TabNavigation_Builder*) builderWithPrototype:(TabNavigation*) prototype {
  return [[TabNavigation builder] mergeFrom:prototype];
}
- (TabNavigation_Builder*) builder {
  return [TabNavigation builder];
}
@end

BOOL TabNavigation_PageTransitionIsValidValue(TabNavigation_PageTransition value) {
  switch (value) {
    case TabNavigation_PageTransitionLink:
    case TabNavigation_PageTransitionTyped:
    case TabNavigation_PageTransitionAutoBookmark:
    case TabNavigation_PageTransitionAutoSubframe:
    case TabNavigation_PageTransitionManualSubframe:
    case TabNavigation_PageTransitionGenerated:
    case TabNavigation_PageTransitionStartPage:
    case TabNavigation_PageTransitionFormSubmit:
    case TabNavigation_PageTransitionReload:
    case TabNavigation_PageTransitionKeyword:
    case TabNavigation_PageTransitionKeywordGenerated:
    case TabNavigation_PageTransitionChainStart:
    case TabNavigation_PageTransitionChainEnd:
      return YES;
    default:
      return NO;
  }
}
BOOL TabNavigation_PageTransitionQualifierIsValidValue(TabNavigation_PageTransitionQualifier value) {
  switch (value) {
    case TabNavigation_PageTransitionQualifierClientRedirect:
    case TabNavigation_PageTransitionQualifierServerRedirect:
      return YES;
    default:
      return NO;
  }
}
@interface TabNavigation_Builder()
@property (retain) TabNavigation* result;
@end

@implementation TabNavigation_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[TabNavigation alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TabNavigation_Builder*) clear {
  self.result = [[[TabNavigation alloc] init] autorelease];
  return self;
}
- (TabNavigation_Builder*) clone {
  return [TabNavigation builderWithPrototype:result];
}
- (TabNavigation*) defaultInstance {
  return [TabNavigation defaultInstance];
}
- (TabNavigation*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TabNavigation*) buildPartial {
  TabNavigation* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (TabNavigation_Builder*) mergeFrom:(TabNavigation*) other {
  if (other == [TabNavigation defaultInstance]) {
    return self;
  }
  if (other.hasIndex) {
    [self setIndex:other.index];
  }
  if (other.hasVirtualUrl) {
    [self setVirtualUrl:other.virtualUrl];
  }
  if (other.hasReferrer) {
    [self setReferrer:other.referrer];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasState) {
    [self setState:other.state];
  }
  if (other.hasPageTransition) {
    [self setPageTransition:other.pageTransition];
  }
  if (other.hasNavigationQualifier) {
    [self setNavigationQualifier:other.navigationQualifier];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TabNavigation_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TabNavigation_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setIndex:[input readInt32]];
        break;
      }
      case 18: {
        [self setVirtualUrl:[input readString]];
        break;
      }
      case 26: {
        [self setReferrer:[input readString]];
        break;
      }
      case 34: {
        [self setTitle:[input readString]];
        break;
      }
      case 42: {
        [self setState:[input readString]];
        break;
      }
      case 48: {
        int32_t value = [input readEnum];
        if (TabNavigation_PageTransitionIsValidValue(value)) {
          [self setPageTransition:value];
        } else {
          [unknownFields mergeVarintField:6 value:value];
        }
        break;
      }
      case 56: {
        int32_t value = [input readEnum];
        if (TabNavigation_PageTransitionQualifierIsValidValue(value)) {
          [self setNavigationQualifier:value];
        } else {
          [unknownFields mergeVarintField:7 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasIndex {
  return result.hasIndex;
}
- (int32_t) index {
  return result.index;
}
- (TabNavigation_Builder*) setIndex:(int32_t) value {
  result.hasIndex = YES;
  result.index = value;
  return self;
}
- (TabNavigation_Builder*) clearIndex {
  result.hasIndex = NO;
  result.index = -1;
  return self;
}
- (BOOL) hasVirtualUrl {
  return result.hasVirtualUrl;
}
- (NSString*) virtualUrl {
  return result.virtualUrl;
}
- (TabNavigation_Builder*) setVirtualUrl:(NSString*) value {
  result.hasVirtualUrl = YES;
  result.virtualUrl = value;
  return self;
}
- (TabNavigation_Builder*) clearVirtualUrl {
  result.hasVirtualUrl = NO;
  result.virtualUrl = @"";
  return self;
}
- (BOOL) hasReferrer {
  return result.hasReferrer;
}
- (NSString*) referrer {
  return result.referrer;
}
- (TabNavigation_Builder*) setReferrer:(NSString*) value {
  result.hasReferrer = YES;
  result.referrer = value;
  return self;
}
- (TabNavigation_Builder*) clearReferrer {
  result.hasReferrer = NO;
  result.referrer = @"";
  return self;
}
- (BOOL) hasTitle {
  return result.hasTitle;
}
- (NSString*) title {
  return result.title;
}
- (TabNavigation_Builder*) setTitle:(NSString*) value {
  result.hasTitle = YES;
  result.title = value;
  return self;
}
- (TabNavigation_Builder*) clearTitle {
  result.hasTitle = NO;
  result.title = @"";
  return self;
}
- (BOOL) hasState {
  return result.hasState;
}
- (NSString*) state {
  return result.state;
}
- (TabNavigation_Builder*) setState:(NSString*) value {
  result.hasState = YES;
  result.state = value;
  return self;
}
- (TabNavigation_Builder*) clearState {
  result.hasState = NO;
  result.state = @"";
  return self;
}
- (BOOL) hasPageTransition {
  return result.hasPageTransition;
}
- (TabNavigation_PageTransition) pageTransition {
  return result.pageTransition;
}
- (TabNavigation_Builder*) setPageTransition:(TabNavigation_PageTransition) value {
  result.hasPageTransition = YES;
  result.pageTransition = value;
  return self;
}
- (TabNavigation_Builder*) clearPageTransition {
  result.hasPageTransition = NO;
  result.pageTransition = TabNavigation_PageTransitionTyped;
  return self;
}
- (BOOL) hasNavigationQualifier {
  return result.hasNavigationQualifier;
}
- (TabNavigation_PageTransitionQualifier) navigationQualifier {
  return result.navigationQualifier;
}
- (TabNavigation_Builder*) setNavigationQualifier:(TabNavigation_PageTransitionQualifier) value {
  result.hasNavigationQualifier = YES;
  result.navigationQualifier = value;
  return self;
}
- (TabNavigation_Builder*) clearNavigationQualifier {
  result.hasNavigationQualifier = NO;
  result.navigationQualifier = TabNavigation_PageTransitionQualifierClientRedirect;
  return self;
}
@end

